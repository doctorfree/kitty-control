#!/bin/bash
#  __ _  __  ____  ____  _  _       ___  __   __ _  ____  ____   __   __
# (  / )(  )(_  _)(_  _)( \/ )___  / __)/  \ (  ( \(_  _)(  _ \ /  \ (  )
#  )  (  )(   )(    )(   )  /(___)( (__(  O )/    /  )(   )   /(  O )/ (_/\
# (__\_)(__) (__)  (__) (__/       \___)\__/ \_)__) (__) (__\_) \__/ \____/
#
# kitty-control - control the Kitty terminal emulator from the command line
#
# Written February, 2024 by Ronald Joe Record <ronaldrecord@gmail.com>
#
VERSION=1.1.3
RELEASE=2
# The Kitty configuration directory
CONFDIR="${HOME}/.config/kitty"
[ "${KITTY_CONFIG_DIRECTORY}" ] && {
  [ -f "${KITTY_CONFIG_DIRECTORY}/kitty.conf" ] && {
    CONFDIR="${KITTY_CONFIG_DIRECTORY}"
  }
}
# The default background opacity for transparency
OPACITY="0.8"
# The socket Kitty is listening on if configured
# The format of this setting is:
#   SOCKET="--to unix:/path/to/socket"
# Leave blank if no listen socket configured
# Can be overridden with -s /path/to/socket
if [ "${KITTY_LISTEN_ON}" ]; then
  SOCKET="--to ${KITTY_LISTEN_ON}"
else
  SOCKET=
fi
# Kitty remote control options are used to specify which windows/tabs to modify
OPTS=
# Menu system vars
FONTDIR="${HOME}/.local/share/figlet-fonts"
LOLCAT="lolcat"
# Clear the screen, can be "clear" or "tput clear"
CLEAR_COMMAND="tput clear"
# Window size increments
winsizes=("+1" "+2" "+4" "+6" "+8" "+10" "+12" "-1" "-2" "-4" "-6" "-8" "-10" "-12")
# Array with font names
fonts=("Fire Font-k" "Graceful" "Script" "Shadow" "Slant" "Small" "Standard")
# Font size choices for menu
fontsizes=("default" "+1" "+2" "+4" "+6" "+8" "+10" "+12" "-1" "-2" "-4" "-6" "-8" "-10" "-12")
# Fzf install script download
fzf_url="https://raw.githubusercontent.com/junegunn/fzf/master/install"
kitty_version_url="https://sw.kovidgoyal.net/kitty/current-version.txt"
# Transparency opacity choices for menu
translevels=("default" "1.0" "0.95" "0.9" "0.85" "0.8" "0.75" "0.7" "0.65" "0.6" "0.55" "0.5" "0.45" "0.4" "0.35" "0.3" "0.25" "0.2" "0.15" "0.1" "0.05" "0.0")
# Give fzf a nice look
export FZF_DEFAULT_OPTS=$FZF_DEFAULT_OPTS'
  --color=fg:#d0d0d0,fg+:#d0d0d0,bg:#0b1a38,bg+:#120f3d
  --color=hl:#5f87af,hl+:#5fd7ff,info:#afaf87,marker:#87ff00
  --color=prompt:#cadf5d,spinner:#af5fff,pointer:#af5fff,header:#87afaf
  --color=border:#5b5bab,label:#aeaeae,query:#d9d9d9
  --border="rounded" --border-label=""
  --preview-window="border-rounded"
  --prompt="ðŸ˜º Select option ("Esc" to return) ï˜½ "
  --marker=">" --pointer="â—†" --separator="â”€" --scrollbar="â”‚"
  --layout="reverse"'
# Use tput to get the bold and normal text sequence
BOLD=$(tput bold 2> /dev/null)
NORM=$(tput sgr0 2> /dev/null)

# Colors
primary_colors=("reset" "custom" "black" "white" "red" "green" "yellow" "blue" "magenta" "cyan" "gray" "maroon" "navy" "purple")
colors=("${primary_colors[@]}")
colors+=("aliceblue" "antiquewhite" "aquamarine" "azure" "beige" "bisque" "blanchedalmond" "blueviolet" "brown" "burlywood" "cadetblue" "chartreuse" "chocolate" "coral" "cornflowerblue" "cornsilk" "darkblue" "darkcyan" "darkgoldenrod" "darkgray" "darkgreen" "darkgrey" "darkkhaki" "darkmagenta" "darkolivegreen" "darkorange" "darkorchid" "darkred" "darksalmon" "darkseagreen" "darkslateblue" "darkslategray" "darkslategrey" "darkturquoise" "darkviolet" "debianred" "deeppink" "deepskyblue" "dimgray" "dimgrey" "dodgerblue" "firebrick" "floralwhite" "forestgreen" "gainsboro" "ghostwhite" "gold" "goldenrod" "greenyellow" "grey" "honeydew" "hotpink" "indianred" "ivory" "khaki" "lavender" "lavenderblush" "lawngreen" "lemonchiffon" "lightblue")
colors+=("lightcoral" "lightcyan" "lightgray" "lightgreen" "lightgrey" "lightpink" "lightsalmon" "lightseagreen" "lightskyblue" "lightslateblue" "lightslategray" "lightslategrey" "lightsteelblue" "lightyellow" "limegreen" "linen" "mediumaquamarine" "mediumblue" "mediumorchid" "mediumpurple" "mediumseagreen" "mediumslateblue" "mediumspringgreen" "mediumturquoise" "mediumvioletred" "midnightblue" "mintcream" "mistyrose" "moccasin" "navajowhite" "navyblue" "oldlace" "olivedrab" "orange" "orangered" "orchid" "palegoldenrod" "palegreen" "paleturquoise" "palevioletred" "papayawhip" "peachpuff" "peru" "pink" "plum" "powderblue" "rosybrown" "royalblue" "saddlebrown" "salmon" "sandybrown" "seagreen" "seashell" "sienna" "skyblue" "slateblue" "slategray" "slategrey" "snow" "springgreen" "steelblue" "tan" "thistle" "tomato" "turquoise" "violet" "violetred" "wheat" "whitesmoke" "yellowgreen" "lightgoldenrod" "lightgoldenrodyellow")

brief_usage() {
  printf "${BOLD}Usage: kitty-control [-adefhuv] [back <color>] [-c command] [dark]"
  printf "\n                     [diff [opts] <path1> <path2>] [font [num]] [fore <color>]"
  printf "\n                     [-i /path/to/image] [icat [opts] <image>] [layout <name>]"
  printf "\n                     [load [subdir|file]] [ls|list [self|colors|tabs|windows]] [-m|t <match>]"
  if [ "${have_fetch}" ]; then
    printf "\n                     [man] [menu] [fetch] [-o doc] [-s /path/to/socket] [term] [theme] [tools]"
  else
    printf "\n                     [man] [menu] [-o doc] [-s /path/to/socket] [size w h] [term] [theme] [tools]"
  fi
  printf "\n                     [title <title>] [transparent [opacity]] [unicode] [upgrade]${NORM}"
  [ "$1" == "noexit" ] || {
    printf "\n\nWithout any arguments '${BOLD}kitty-control${NORM}'"
    printf " displays an interactive menu system"
    printf "\nFor a brief usage message run '${BOLD}kitty-control -u${NORM}'"
    printf "\nFor a full usage message run '${BOLD}kitty-control -h${NORM}'"
    printf "\nTo display several examples run '${BOLD}kitty-control -e${NORM}'\n\n"
    exit 1
  }
}

show_about() {
  heading "About Kitty Control" "About"
  if [ "${have_rich}" ]; then
    rich "[red]Kitty Control[/] is an open source command line utility to control some aspects of" -p
    rich "the [green]Kitty[/] terminal emulator using the [green]Kitty remote control[/] facility and [green]kittens[/]." -p
    printf "\n"
    rich "[red]Kitty Control[/] enables automation of [green]Kitty[/] customization and provides an" -p
    rich "additional layer of convenience. Scripted [green]Kitty[/] actions enable quick and easy" -p
    rich "switching between preconfigured [green]Kitty[/] configurations without losing state or" -p
    rich "or having to quit [green]Kitty[/] and restart with another configuration. This is done" -p
    rich "through the use of the [red]read_config.py[/] custom [green]kitten[/] included with [red]kitty-control[/]." -p
    printf "\n"
    rich "[red]kitty-control[/] is written in [yellow]Bash[/] and [yellow]Python[/] by Ronald Record." -p
  else
    printf "'Kitty Control' is an open source command line utility to control some aspects of"
    printf "\nthe 'Kitty' terminal emulator using the 'Kitty' remote control facility and kittens.\n"
    printf "\n'Kitty Control' enables automation of 'Kitty' customization and provides an"
    printf "\nadditional layer of convenience. Scripted 'Kitty' actions enable quick and easy"
    printf "\nswitching between preconfigured 'Kitty' configurations without losing state or"
    printf "\nor having to quit 'Kitty' and restart with another configuration. This is done"
    printf "\nthrough the use of the 'read_config.py' custom 'kitten' included with 'kitty-control'."
    printf "\n\n'kitty-control' is written in 'Bash' and 'Python' by Ronald Record."
  fi
  show_versions
}

show_examples() {
  clear_screen
  if [ "${have_rich}" ]; then
    rich "[cyan]Kitty Control Examples[/cyan]" -p -a rounded -c -C
  else
    if [ "${use_figlet}" ]; then
      show_figlet "Examples"
    else
      printf "\nExample invocations of kitty-control\n"
    fi
  fi
  printf "\nTo set a transparent Kitty background with 0.9 opacity:"
  printf "\n\t${BOLD}kitty-control transparent 0.9${NORM}"
  printf "\nTo set the Kitty background to fully opaque (no transparency):"
  printf "\n\t${BOLD}kitty-control dark${NORM}"
  printf "\nTo set the Kitty background color to black and foreground color to white:"
  printf "\n\t${BOLD}kitty-control back black fore white${NORM}"
  printf "\nTo load the Kitty config in ~/.config/kitty/laptop/kitty.conf"
  printf "\n\t${BOLD}kitty-control load laptop${NORM}"
  printf "\nTo increase the font size by 2 points:"
  printf "\n\t${BOLD}kitty-control font +2${NORM}"
  printf "\nTo increase the window width by 4 cells and height by 3 cells:"
  printf "\n\t${BOLD}kitty-control size 4 3${NORM}"
  printf "\nTo set the background image to ~/Pictures/groovy.png"
  printf "\n\t${BOLD}kitty-control -i ~/Pictures/groovy.png${NORM}"
  printf "\nActions can be combined on the same command line:"
  printf "\n\t${BOLD}kitty-control -i ~/Pictures/groovy.png fore cyan font 24${NORM}"
  printf "\nTo view the image ~/Pictures/cats.png"
  printf "\n\t${BOLD}kitty-control icat ~/Pictures/cats.png${NORM}"
  printf "\nTo view differences between /path/to/file1 and /path/to/file2"
  printf "\n\t${BOLD}kitty-control diff /path/to/file1 /path/to/file2${NORM}"
  printf "\nTo set the tab title of the tab currently titled '~/src/borg' to 'Borg Backup':"
  printf "\n\t${BOLD}kitty-control -m \"title:borg\" title \"Borg Backup\"${NORM}"
  printf "\nTo restore the original Kitty configuration:"
  printf "\n\t${BOLD}kitty-control load default${NORM}"
  printf "\n\nWithout any arguments '${BOLD}kitty-control${NORM}'"
  printf " displays an interactive menu system\n"
  [ "$1" == "noexit" ] || exit 1
}

usage() {
  brief_usage noexit
  printf "\nWhere:"
  printf "\n    '${BOLD}back color${NORM}' Sets the background color to 'color'"
  printf "\n           If 'color' is 'reset' restores foreground and background to startup value"
  printf "\n    '${BOLD}dark${NORM}' Sets the Kitty background opacity to 1.0 (fully opaque)"
  printf "\n           Can use 'dark' or 'opaque'"
  printf "\n    '${BOLD}diff [opts] <file1|dir1> <file2|dir2>${NORM}'"
  printf " Displays differences using the 'diff' kitten"
  printf "\n           Enclose [opts] and <file1/dir1> in quotes if [opts] are provided"
  printf "\n           See https://sw.kovidgoyal.net/kitty/kittens/diff/#options"
  [ "${have_fetch}" ] && {
    printf "\n    '${BOLD}fetch${NORM}' Displays system information with fastfetch/neofetch"
  }
  printf "\n    '${BOLD}font num${NORM}' Sets the font pointsize to 'num'"
  printf "\n           Can use 'font', 'fontsize', 'fontminus', or 'fontplus'"
  printf "\n           The second argument specifies the font size, either absolute, +, or -"
  printf "\n           e.g. 'kitty-control fontsize 24' would set the font size to 24 points"
  printf "\n                'kitty-control font +2' would increase the font size by 2 points"
  printf "\n                'kitty-control font' without argument resets the font size to default"
  printf "\n    '${BOLD}fore color${NORM}' Sets the foreground color to 'color'"
  printf "\n           If 'color' is 'reset' restores foreground and background to startup value"
  printf "\n    '${BOLD}icat [opts] <image>${NORM}' Displays <image> using the Kitty 'icat' kitten"
  printf "\n           Enclose [opts] and <image> in quotes if [opts] are provided"
  printf "\n           To remove all images currently displayed on the screen:"
  printf "\n               kitty-control icat --clear"
  printf "\n           See https://sw.kovidgoyal.net/kitty/kittens/icat/#options"
  printf "\n    '${BOLD}list|ls [self|colors|tabs|windows]${NORM}' Displays info on Kitty tabs/windows/colors"
  printf "\n        '${BOLD}list${NORM}' displays full info, '${BOLD}ls${NORM}' abbreviated info"
  printf "\n        '${BOLD}self${NORM}' Indicates display info for this Kitty window"
  printf "\n        '${BOLD}colors${NORM}' Indicates display the names of the supported Kitty colors"
  printf "\n        '${BOLD}tabs|windows${NORM}' Indicates display info on Kitty tabs or windows"
  printf "\n    '${BOLD}layout <name>${NORM}'"
  printf "\n        Sets the Kitty window layout to '<name>' where '<name>' can be one of:"
  printf "\n          Previous Fat Grid Horizontal Splits Stack Tall Vertical"
  printf "\n    '${BOLD}load [subdir|file]${NORM}'"
  printf " Reloads the Kitty configuration in ~/.config/kitty/kitty.conf"
  printf "\n           Can use 'load' or 'reload'"
  printf "\n           Specify a second argument to load ~/.config/kitty/<subdir>/kitty.conf"
  printf "\n           e.g. 'kitty-control load tv' would load ~/.config/kitty/tv/kitty.conf"
  printf "\n           This argument can also be the path to a Kitty configuration file to load"
  printf "\n           'kitty-control load default' loads the ~/.config/kitty/kitty.conf config"
  printf "\n           'kitty-control load --help' displays a help message for the load command"
  printf "\n    '${BOLD}man${NORM}' Displays the kitty-control manual"
  printf "\n    '${BOLD}menu${NORM}' Displays the kitty-control interactive menu system"
  printf "\n    '${BOLD}size w h${NORM}' Increases/decreases the window size 'w' and 'h' cells"
  printf "\n           The 'w' argument specifies the window width adjustment in cells"
  printf "\n           The 'h' argument specifies the window height adjustment in cells"
  printf "\n           'kitty-control size 4 3' increases the window width by 4 cells and height by 3 cells"
  printf "\n    '${BOLD}term${NORM}'"
  printf " Displays information about the terminal using the query_terminal kitten"
  printf "\n    '${BOLD}theme${NORM}' Displays the interactive theme selection kitten"
  printf "\n    '${BOLD}title <tab title>${NORM}' Sets the Kitty tab title to \"tab title\""
  printf "\n          Quote tab titles which contain spaces, e.g. \"This Is My Tab Title\""
  printf "\n          Use '-m <match>' to specify the tab to match"
  printf "\n    '${BOLD}tools${NORM}' Installs 'figlet' 'jq' 'lolcat' 'fastfetch' and 'ranger' if not already present"
  printf "\n    '${BOLD}tran [opacity]${NORM}' Sets the Kitty background opacity to 0.8"
  printf "\n           Can use 'tran', 'opacity', 'trans' or 'transparent'"
  printf "\n           Specify a second argument to set a custom background opacity:"
  printf "\n           e.g. 'kitty-control transparent 0.9'"
  printf "\n    '${BOLD}unicode${NORM}' Displays the Unicode input kitten"
  printf "\n    '${BOLD}upgrade${NORM}' Upgrades Kitty, Fzf, and kitty-control to the latest version"
  printf "\n    '${BOLD}-a${NORM}'"
  printf " Indicates modify all windows rather than just the currently active OS window"
  printf "\n    '${BOLD}-c command${NORM}'"
  printf " specifies a Kitty command to run (enclose command and arguments in quotes)"
  printf "\n        Can be used to run arbitrary commands, e.g. 'kitty-control -c get-colors'"
  printf "\n    '${BOLD}-d${NORM}' Debug mode - display commands when executed"
  printf "\n    '${BOLD}-e${NORM}' Displays several example invocations and exits"
  printf "\n    '${BOLD}-f${NORM}' Indicates toggle fullscreen"
  printf "\n    '${BOLD}-h${NORM}' Displays a full usage message and exits"
  printf "\n    '${BOLD}-i /path/to/image${NORM}'"
  printf " sets the background image for the specified Kitty windows"
  printf "\n        If /path/to/image is 'none' then any existing image will be removed"
  printf "\n    '${BOLD}-m <match>${NORM}' Specifies the window to match"
  printf "\n    '${BOLD}-t <match>${NORM}' Specifies the tab to match"
  printf "\n        Window/Tab matching can be used in conjunction with most kitty-control commands"
  printf "\n        If <match> is '--help' the Kitty documentation URL for matching will be displayed"
  printf "\n    '${BOLD}-o doc${NORM}' Opens the specified Kitty documentation in a browser"
  printf "\n        '${BOLD}doc${NORM}' can be one of:"
  printf "\n            'conf' 'faq' 'remote' 'diff' 'icat' 'layout' 'ssh' 'themes' 'unicode' or 'man'"
  printf "\n    '${BOLD}-s /path/to/socket${NORM}'"
  printf " Specifies the socket Kitty is listening on if enabled"
  printf "\n        If /path/to/socket is '--help' some help on configuring a Kitty socket is provided"
  printf "\n        '-s /path/...' can be used to send commands to Kitty from another terminal"
  printf "\n    '${BOLD}-u${NORM}' Displays a brief usage message and exits"
  printf "\n    '${BOLD}-v${NORM}' Displays the kitty-control and kitty versions then exits"
  printf "\n\nWithout any arguments '${BOLD}kitty-control${NORM}'"
  printf " displays an interactive menu system"
  printf "\nAdjusting the background opacity or font size requires the original kitty.conf"
  printf "\nthat was used for this instance of Kitty to have enabled the following:"
  printf "\n    '${BOLD}dynamic_background_opacity yes${NORM}'"
  printf " and '${BOLD}allow_remote_control yes${NORM}'"
  printf "\nSee https://sw.kovidgoyal.net/kitty/remote-control/#control-kitty-from-scripts\n"
  [ "$1" == "examples" ] && show_examples
  [ "$1" == "noexit" ] || exit 1
}

clear_screen() {
  [ "${debug}" ] || ${CLEAR_COMMAND}
}

exit_control() {
  exitcode=$?
  heading "Exiting kitty-control" "Farewell"
  printf "\n"
  exit ${exitcode}
}

pathadd() {
  if [ -d "$1" ] && [[ ":$PATH:" != *":$1:"* ]]; then
    PATH="$1${PATH:+":$PATH"}"
    export PATH
  fi
}

prompt_continue() {
  printf "\nPress ${BOLD}<Enter>${NORM} to continue ... "
  read -r yn
}

prompt_more() {
  printf "\nPress <Enter> to view the full list of color names, 'q' to return ... "
  read -r yn
  case "${yn}" in
    q* | Q*)
      return
      ;;
    *)
      list_colors
      prompt_continue
      ;;
  esac
}

exit_warning() {
  WARN=
  SUBW=
  PROMPT=1
  [ ${warning_issued} -lt 4 ] && {
    if [ "$2" ]; then
      [ ${warning_issued} -eq 3 ] || {
        WARN="$2"
        if [ ${warning_issued} -eq 1 ]; then
          PROMPT=
        else
          SUBW="Subsequent exit failures of this type will be ignored"
        fi
      }
      if [ ${warning_issued} -eq 2 ]; then
        warning_issued=4
      else
        warning_issued=3
      fi
    else
      [ ${warning_issued} -eq 2 ] || {
        WARN="Verify that 'allow_remote_control' is enabled in kitty.conf"
        if [ ${warning_issued} -eq 1 ]; then
          PROMPT=
        else
          SUBW="Subsequent exit failures of this type will be ignored"
        fi
      }
      if [ ${warning_issued} -eq 3 ]; then
        warning_issued=4
      else
        warning_issued=2
      fi
    fi
    [ "${WARN}" ] && {
      printf "\nWARNING: %s" "$1"
      printf "\n         did not return a successful exit status\n%s\n" "${WARN}"
      if [ ${warning_issued} -eq 4 ]; then
        printf "\nSubsequent exit failures will be ignored\n"
      else
        [ "${SUBW}" ] && printf "\n%s\n" "${SUBW}"
      fi
      [ "${PROMPT}" ] && prompt_continue
    }
  }
}

show_term_info() {
  w_size=$(kitty +kitten icat --print-window-size)
  if [ "${have_rich}" ]; then
    printf "\n"
    rich "[cyan]window_size:[/] [yellow]${w_size}[/]" -p
    kitty +kitten query_terminal | while read i; do
      label=$(echo "$i" | awk -F ':' '{ print $1 }')
      value=$(echo "$i" | awk -F ':' '{ print $2 }')
      rich "[cyan]${label}:[/] [yellow]${value}[/]" -p
    done
  else
    printf "\n${BOLD}window_size:${NORM} %s" "${w_size}"
    kitty +kitten query_terminal | while read i; do
      label=$(echo "$i" | awk -F ':' '{ print $1 }')
      value=$(echo "$i" | awk -F ':' '{ print $2 }')
      printf "\n${BOLD}%s:${NORM}%s" "${label}" "${value}"
    done
    printf "\n"
  fi
}

tolower() {
  echo "$1" | tr '[:upper:]' '[:lower:]'
}

set_show_shortcuts() {
  if [ "${have_fzf}" ]; then
    shortcuts="b/back c/clear B/dark F/full f/font g/fore z/fuzzy h/help I/info W/size"
  else
    shortcuts="b/back c/clear B/dark F/full f/font g/fore h/help I/info W/size"
  fi
  addtlcuts="C/colors k/tabs w/windows l/load o/opts q/quit T/theme t/tran v/view"
  if [ "${have_rich}" ]; then
    rich "[b cyan]Shortcuts:[/] [b yellow]${shortcuts}[/]" -p
    rich "           [b yellow]${addtlcuts}[/]" -p
  else
    printf "\nShortcuts: ${BOLD}${shortcuts}${NORM}"
    printf "\n           ${BOLD}${addtlcuts}${NORM}\n"
  fi
}

show_help() {
  clear_screen
  if [ "${have_rich}" ]; then
    rich "[cyan]Kitty Control Menu Help[/cyan]" -p -a rounded -c -C
    rich "[green]Control kitty from a menu system[/green]" -p -c
  else
    printf "\n\tKitty Control Menu Help\n"
    printf "\n\tControl kitty from a menu system\n"
  fi
  printf "\nEnter a menu option number or shortcut to select an option.\n\n"
  set_show_shortcuts
  printf "\nIn the fuzzy selection dialogs, enter a few letters to fuzzy select from the options\n"
  if [ "${have_rich}" ]; then
    rich "or use the [magenta]<Up-Arrow>[/] and [magenta]<Down-Arrow>[/] keys to move through the options." -p
    rich "Press [magenta]<Enter>[/] to select the highlighted option." -p
  else
    printf "or use the <Up-Arrow> and <Down-Arrow> keys to move through the options."
    printf "\nPress <Enter> to select the highlighted option.\n"
  fi
  printf "\nKitty Control can also be used from the command line.\n"
  if [ "${have_rich}" ]; then
    rich "See: [cyan]kitty-control -h[/] for full usage details" -p
  else
    printf "${BOLD}${LINE}See:${NORM} ${BOLD}kitty-control -h${NORM} for full usage details\n"
  fi
  prompt_continue
}

show_layout_help() {
  clear_screen
  if [ "${have_rich}" ]; then
    rich "[cyan]Kitty Window Layout Help[/cyan]" -p -a rounded -c -C
    rich "[red]Kitty[/] has the ability to define its own windows that can be tiled next to each" -p
    rich "other in arbitrary arrangements, based on [yellow]Layouts[/]. A [yellow]layout[/] is an" -p
    rich "arrangement of multiple [red]kitty[/] windows inside a top-level OS window. The layout" -p
    rich "manages all its windows automatically, resizing and moving them as needed." -p
    rich "You can create a new window using the [green]ctrl+shift+enter[/] key combination." -p
    printf "\n"
    rich "Currently, there are seven layouts available:" -p
    rich "[yellow]Fat[/] -- One (or optionally more) windows are shown full width on the top." -p
    rich "       The rest of the windows are shown side-by-side on the bottom" -p
    rich "[yellow]Grid[/] -- All windows are shown in a grid" -p
    rich "[yellow]Horizontal[/] -- All windows are shown side-by-side" -p
    rich "[yellow]Splits[/] -- Windows arranged in arbitrary patterns created using horizontal and vertical splits" -p
    rich "[yellow]Stack[/] -- Only a single maximized window is shown at a time" -p
    rich "[yellow]Tall[/] -- One (or optionally more) windows are shown full height on the left." -p
    rich "        The rest of the windows are shown one below the other on the right" -p
    rich "[yellow]Vertical[/] -- All windows are shown one below the other" -p
  else
    printf "\n\tKitty Window Layout Help\n"
    printf "\n${BOLD}Kitty${NORM} has the ability to define its own windows that can be tiled"
    printf "\nnext to each other in arbitrary arrangements, based on ${BOLD}Layouts${NORM}.\n"
    printf "\nA layout is an arrangement of multiple kitty windows inside a top-level OS window."
    printf "\nThe layout manages all its windows automatically, resizing and moving them as needed."
    printf "\nYou can create a new window using the ctrl+shift+enter key combination.\n"
    printf "\nCurrently, there are seven layouts available:"
    printf "\n  Fat -- One (or optionally more) windows are shown full width on the top."
    printf "\n         The rest of the windows are shown side-by-side on the bottom"
    printf "\n  Grid -- All windows are shown in a grid"
    printf "\n  Horizontal -- All windows are shown side-by-side"
    printf "\n  Splits -- Windows arranged in arbitrary patterns created using horizontal and vertical splits"
    printf "\n  Stack -- Only a single maximized window is shown at a time"
    printf "\n  Tall -- One (or optionally more) windows are shown full height on the left."
    printf "\n          The rest of the windows are shown one below the other on the right"
    printf "\n  Vertical -- All windows are shown one below the other\n"
  fi
  prompt_continue
}

show_fetch() {
  have_fastfetch=$(type -p fastfetch)
  if [ "${have_fastfetch}" ]; then
    have_ffetch=$(type -p ffetch)
    if [ "${have_ffetch}" ]; then
      ffetch
    else
      clear_screen
      fastfetch
    fi
  else
    have_neofetch=$(type -p neofetch)
    [ "${have_neofetch}" ] && {
      have_nfetch=$(type -p nfetch)
      if [ "${have_nfetch}" ]; then
        nfetch
      else
        IMG="${HOME}/.local/share/icons/hicolor/256x256/apps/kitty.png"
        icon_name=
        icon_size="512"
        if [ "${darwin}" ]; then
          icon_name="apple-logo"
          icon_size="384"
        else
          [ -f /etc/os-release ] && {
            . /etc/os-release
            icon_name="${ID}"
          }
        fi
        AMG="${HOME}/.local/share/icons/hicolor/${icon_size}x${icon_size}/apps/${icon_name}.png"
        if [ -f "${AMG}" ]; then
          IMG="${AMG}"
        else
          icon_name="${ID_LIKE}"
          AMG="${HOME}/.local/share/icons/hicolor/${icon_size}x${icon_size}/apps/${icon_name}.png"
          if [ -f "${AMG}" ]; then
            IMG="${AMG}"
          else
            icon_name="kitty"
            IMG="${HOME}/.local/share/icons/hicolor/${icon_size}x${icon_size}/apps/${icon_name}.png"
          fi
        fi
        clear_screen
        if [ -f "${IMG}" ]; then
          neofetch --kitty auto --source "${IMG}"
        else
          neofetch
        fi
      fi
    }
  fi
  [ "$1" == "proceed" ] || prompt_continue
}

get_control_version() {
  VTOP="https://raw.githubusercontent.com/doctorfree/kitty-control"
  VURL="${VTOP}/main/VERSION"
  curl -fsSL "${VURL}" > /tmp/kcv$$
  kcver=$(cat /tmp/kcv$$ | grep VERSION | awk -F '=' '{ print $2 }')
  kcrel=$(cat /tmp/kcv$$ | grep RELEASE | awk -F '=' '{ print $2 }')
  rm -f /tmp/kcv$$
  echo "v${kcver}r${kcrel}"
}

get_install_version() {
  KC_INST="${HOME}/.local/bin/kitty-control"
  if [ -f ${KC_INST} ]; then
    kcver=$(grep ^VERSION= ${KC_INST} | awk -F '=' '{ print $2 }')
    kcrel=$(grep ^RELEASE= ${KC_INST} | awk -F '=' '{ print $2 }')
  else
    kcver=${VERSION}
    kcrel=${RELEASE}
  fi
  echo "v${kcver}r${kcrel}"
}

# check_three_version release_version install_version
check_three_version() {
  release_version="$1"
  install_version="$2"

  release_major=$(echo ${release_version} | awk -F '.' '{ print $1 }')
  release_midde=$(echo ${release_version} | awk -F '.' '{ print $2 }')
  release_minor=$(echo ${release_version} | awk -F '.' '{ print $3 }')
  [ "${release_major}" ] || release_major=0
  [ "${release_midde}" ] || release_midde=0
  [ "${release_minor}" ] || release_minor=0

  install_major=$(echo ${install_version} | awk -F '.' '{ print $1 }')
  install_midde=$(echo ${install_version} | awk -F '.' '{ print $2 }')
  install_minor=$(echo ${install_version} | awk -F '.' '{ print $3 }')
  [ "${install_major}" ] || install_major=0
  [ "${install_midde}" ] || install_midde=0
  [ "${install_minor}" ] || install_minor=0

  if [ ${release_major} -gt ${install_major} ]; then
    echo "${release_version}"
  else
    if [ ${release_midde} -gt ${install_midde} ]; then
      echo "${release_version}"
    else
      if [ ${release_minor} -gt ${install_minor} ]; then
        echo "${release_version}"
      else
        echo ""
      fi
    fi
  fi
}

# check_control_version release_version install_version
check_control_version() {
  release_version=$(echo $1 | awk -F 'r' '{ print $1 }' | sed -e "s/v//")
  release_release=$(echo $1 | awk -F 'r' '{ print $2 }')
  install_version=$(echo $2 | awk -F 'r' '{ print $1 }' | sed -e "s/v//")
  install_release=$(echo $2 | awk -F 'r' '{ print $2 }')
  release_major=$(echo ${release_version} | awk -F '.' '{ print $1 }')
  release_midde=$(echo ${release_version} | awk -F '.' '{ print $2 }')
  release_minor=$(echo ${release_version} | awk -F '.' '{ print $3 }')
  [ "${release_major}" ] || release_major=0
  [ "${release_midde}" ] || release_midde=0
  [ "${release_minor}" ] || release_minor=0
  [ "${release_release}" ] || release_release=0
  install_major=$(echo ${install_version} | awk -F '.' '{ print $1 }')
  install_midde=$(echo ${install_version} | awk -F '.' '{ print $2 }')
  install_minor=$(echo ${install_version} | awk -F '.' '{ print $3 }')
  [ "${install_major}" ] || install_major=0
  [ "${install_midde}" ] || install_midde=0
  [ "${install_minor}" ] || install_minor=0
  [ "${install_release}" ] || install_release=0
  if [ ${release_major} -gt ${install_major} ]; then
    echo "${release_version}"
  else
    if [ ${release_midde} -gt ${install_midde} ]; then
      echo "${release_version}"
    else
      if [ ${release_minor} -gt ${install_minor} ]; then
        echo "${release_version}"
      else
        if [ ${release_release} -gt ${install_release} ]; then
          echo "${release_version}"
        else
          echo ""
        fi
      fi
    fi
  fi
}

show_versions() {
  printf "\n"
  control_version=$(get_control_version)
  install_version=$(get_install_version)
  if [ "${have_rich}" ]; then
    if [ "${install_version}" == "${control_version}" ]; then
      rich "Installed [green]kitty-control[/] version: [yellow]${install_version}[/] (îª² current)" -p
    else
      rich "Installed [green]kitty-control[/] version: [yellow]${install_version}[/]" -p
      rich "Available [green]kitty-control[/] version: [yellow]${control_version}[/]" -p
    fi
  else
    printf "\nInstalled kitty-control version: ${install_version}"
    if [ "${install_version}" == "${control_version}" ]; then
      printf " (îª² current)"
    else
      printf "\nAvailable kitty-control version: ${control_version}"
    fi
  fi
  release_version=$(curl -fsSL "${kitty_version_url}")
  install_version=$(kitty --version | awk '{ print $2 }')
  if [ "${have_rich}" ]; then
    if [ "${install_version}" == "${release_version}" ]; then
      rich "Installed [green]kitty[/] version: [yellow]${install_version}[/] (îª² current)" -p
    else
      rich "Installed [green]kitty[/] version: [yellow]${install_version}[/]" -p
      rich "Available [green]kitty[/] version: [yellow]${release_version}[/]" -p
    fi
  else
    printf "\nInstalled kitty version: ${install_version}"
    if [ "${install_version}" == "${release_version}" ]; then
      printf " (îª² current)"
    else
      printf "\nAvailable kitty version: ${release_version}"
    fi
  fi
  release_version=$(curl -fsSL "${fzf_url}" | grep ^version= | awk -F '=' '{ print $2 }')
  if [ "${have_fzf}" ]; then
    install_version=$(fzf --version | awk '{ print $1 }')
  else
    install_version="uninstalled"
  fi
  if [ "${have_rich}" ]; then
    if [ "${install_version}" == "${release_version}" ]; then
      rich "Installed [green]fzf[/] version: [yellow]${install_version}[/] (îª² current)" -p
    else
      rich "Installed [green]fzf[/] version: [yellow]${install_version}[/]" -p
      rich "Available [green]fzf[/] version: [yellow]${release_version}[/]" -p
    fi
  else
    printf "\nInstalled fzf version: ${install_version}"
    if [ "${install_version}" == "${release_version}" ]; then
      printf " (îª² current)\n"
    else
      printf "\nAvailable fzf version: ${release_version}\n"
    fi
  fi
  [ "${have_fastfetch}" ] && {
    release_version=$(get_fastfetch_release)
    install_version=$(fastfetch --version | awk '{ print $2 }')
    if [ "${have_rich}" ]; then
      if [ "${install_version}" == "${release_version}" ]; then
        rich "Installed [green]fastfetch[/] version: [yellow]${install_version}[/] (îª² current)" -p
      else
        rich "Installed [green]fastfetch[/] version: [yellow]${install_version}[/]" -p
        rich "Available [green]fastfetch[/] version: [yellow]${release_version}[/]" -p
      fi
    else
      printf "\nInstalled fastfetch version: ${install_version}"
      if [ "${install_version}" == "${release_version}" ]; then
        printf " (îª² current)\n"
      else
        printf "\nAvailable fastfetch version: ${release_version}\n"
      fi
    fi
  }
}

install_figlet() {
  have_make=$(type -p make)
  if [ "${have_make}" ]; then
    printf "\nInstalling figlet\n"
    HERE=$(pwd)
    git clone https://github.com/cmatsuoka/figlet /tmp/figlet$$ > /dev/null 2>&1
    cd /tmp/figlet$$
    ${SUDO} make install > /dev/null 2>&1
    cd "${HERE}"
    ${SUDO} rm -rf /tmp/figlet$$
    have_figlet=$(type -p figlet)
    [ "${have_figlet}" ] && use_figlet=1
  else
    printf "\nInstallation of figlet requires 'make' but 'make' not found."
    printf "\nInstall 'make' and try again. Skipping installation of figlet.\n"
    prompt_continue
  fi
}

install_fzf() {
  printf "\nInstalling fzf\n"
  [ -f ${HOME}/.local/bin/fzf ] && {
    mv ${HOME}/.local/bin/fzf ${HOME}/.local/bin/fzf-bak$$
  }
  [ -d ${HOME}/.fzf ] && mv ${HOME}/.fzf ${HOME}/.fzf$$
  git clone --depth 1 https://github.com/junegunn/fzf.git \
    ${HOME}/.fzf > /dev/null 2>&1
  [ -f ${HOME}/.fzf/install ] && chmod 755 ${HOME}/.fzf/install
  [ -x ${HOME}/.fzf/install ] && ${HOME}/.fzf/install --all > /dev/null 2>&1
  [ -d ${HOME}/.fzf/bin ] && pathadd "${HOME}/.fzf/bin"
  if [ -f ${HOME}/.fzf/bin/fzf ]; then
    ln -s ${HOME}/.fzf/bin/fzf ${HOME}/.local/bin/fzf
    rm -f ${HOME}/.local/bin/fzf-bak$$
  else
    [ -f ${HOME}/.local/bin/fzf-bak$$ ] && {
      mv ${HOME}/.local/bin/fzf-bak$$ ${HOME}/.local/bin/fzf
    }
  fi
  have_fzf=$(type -p fzf)
  [ "${have_fzf}" ] && use_fzf=1
}

install_lolcat() {
  printf "\nInstalling lolcat\n"
  if [ "${darwin}" ]; then
    [ "${have_brew}" ] && brew install lolcat > /dev/null 2>&1
  else
    have_snap=$(type -p snap)
    [ "${have_snap}" ] && ${SUDO} snap install lolcat > /dev/null 2>&1
  fi
  have_lolcat=$(type -p lolcat)
}

set_fastfetch_url() {
  OWNER=fastfetch-cli
  PROJECT=fastfetch
  API_URL="https://api.github.com/repos/${OWNER}/${PROJECT}/releases/latest"
  [ "${have_curl}" ] && [ "${have_jq}" ] && {
    DL_URL=$(curl --silent ${AUTH_HEADER} "${API_URL}" \
      | jq --raw-output '.assets | .[]?.browser_download_url' \
      | grep "${name}\.tar\.gz$")
  }
}

dl_fastfetch_asset() {
  if [ "${darwin}" ]; then
    name="fastfetch-macos-universal"
  else
    if [ "${arm}" ]; then
      name="fastfetch-linux-aarch64"
    else
      name="fastfetch-linux-amd64"
    fi
  fi

  DL_URL=
  set_fastfetch_url
  [ "${DL_URL}" ] && {
    [ "${have_wget}" ] && {
      printf "\nDownloading fastfetch release asset ..."
      TEMP_ASS="$(mktemp --suffix=.tgz)"
      wget --quiet -O "${TEMP_ASS}" "${DL_URL}" >/dev/null 2>&1
      chmod 644 "${TEMP_ASS}"
      mkdir -p /tmp/fast$$
      tar -C /tmp/fast$$ -xzf "${TEMP_ASS}"
      [ -d /tmp/fast$$/${name}/usr ] && {
        cd /tmp/fast$$/${name}/usr
        tar cf /tmp/fastfetch$$.tar bin share
        [ -d ${HOME}/.local ] || mkdir -p ${HOME}/.local
        tar -C ${HOME}/.local -xf /tmp/fastfetch$$.tar
        rm -f /tmp/fastfetch$$.tar
      }
      cd
      rm -f "${TEMP_ASS}"
      rm -rf /tmp/fast$$
      printf " done"
    }
  }
}

get_fastfetch_release() {
  name="fastfetch-linux-amd64"
  DL_URL=
  set_fastfetch_url
  echo "${DL_URL}" | awk -F '/' '{ print $8 }'
}

install_fastfetch() {
  if [ "${darwin}" ]
  then
    if [ "${have_brew}" ]
    then
      brew install fastfetch >/dev/null 2>&1
    else
      dl_fastfetch_asset
    fi
  else
    dl_fastfetch_asset
  fi
  have_fetch=$(type -p fastfetch)
  [ "${have_fetch}" ] || have_fetch=$(type -p neofetch)
}

install_neofetch() {
  have_git=$(type -p git)
  [ "${have_git}" ] && {
    git clone https://github.com/LorenDB/neofetch /tmp/neofetch$$
    [ -f /tmp/neofetch$$/neofetch ] && {
      [ -d ${HOME}/.local/bin ] || {
        mkdir -p ${HOME}/.local/bin
        pathadd "${HOME}/.local/bin"
      }
      cp /tmp/neofetch$$/neofetch ${HOME}/.local/bin/neofetch
      chmod 755 ${HOME}/.local/bin/neofetch
      [ -f /tmp/neofetch$$/neofetch.1 ] && {
        [ -d ${HOME}/.local/share/man/man1 ] || {
          mkdir -p ${HOME}/.local/share/man/man1
        }
        cp /tmp/neofetch$$/neofetch.1 ${HOME}/.local/share/man/man1/neofetch.1
        chmod 644 ${HOME}/.local/share/man/man1/neofetch.1
      }
    }
    rm -rf /tmp/neofetch$$
  }
  have_fetch=$(type -p fastfetch)
  [ "${have_fetch}" ] || have_fetch=$(type -p neofetch)
}

install_package() {
  pkg="$1"
  printf "\nInstalling ${pkg}\n"
  if [ "${darwin}" ]; then
    [ "${have_brew}" ] && brew install ${pkg} > /dev/null 2>&1
  else
    have_apt=$(type -p apt)
    if [ "${have_apt}" ]; then
      ${SUDO} apt install ${pkg} > /dev/null 2>&1
    else
      have_pac=$(type -p pacman)
      if [ "${have_pac}" ]; then
        ${SUDO} pacman -S ${pkg} > /dev/null 2>&1
      else
        have_apk=$(type -p apk)
        if [ "${have_apk}" ]; then
          ${SUDO} apk add ${pkg} > /dev/null 2>&1
        else
          have_dnf=$(type -p dnf)
          if [ "${have_dnf}" ]; then
            ${SUDO} dnf install ${pkg} > /dev/null 2>&1
          else
            have_xbps=$(type -p xbps-install)
            if [ "${have_xbps}" ]; then
              ${SUDO} xbps-install -S ${pkg} > /dev/null 2>&1
            else
              have_zypp=$(type -p zypper)
              [ "${have_zypp}" ] && {
                ${SUDO} zypper install ${pkg} > /dev/null 2>&1
              }
            fi
          fi
        fi
      fi
    fi
  fi
}

install_ranger() {
  have_make=$(type -p make)
  if [ "${have_make}" ]; then
    printf "\nInstalling ranger\n"
    HERE=$(pwd)
    git clone https://github.com/ranger/ranger /tmp/ranger$$ > /dev/null 2>&1
    cd /tmp/ranger$$
    git checkout stable > /dev/null 2>&1
    ${SUDO} make install > /dev/null 2>&1
    cd "${HERE}"
    ${SUDO} rm -rf /tmp/ranger$$
    have_ranger=$(type -p ranger)
    [ "${have_ranger}" ] && use_ranger=1
    [ -d ${HOME}/.config ] || mkdir -p ${HOME}/.config
    [ -d ${HOME}/.config/ranger ] && {
      mv ${HOME}/.config/ranger ${HOME}/.config/ranger.bak$$
    }
    git clone https://github.com/doctorfree/ranger \
      ${HOME}/.config/ranger > /dev/null 2>&1
    rm -rf ${HOME}/.config/ranger/.git
    [ -f ${HOME}/.config/ranger/scope.sh ] && {
      chmod 755 ${HOME}/.config/ranger/scope.sh
    }
    [ -d ${HOME}/.config/ranger.bak$$ ] && {
      diff -srq ${HOME}/.config/ranger.bak$$ \
        ${HOME}/.config/ranger \
        | grep identical | grep ^File \
        | while read dupline; do
          dup=$(echo "${dupline}" | awk '{ print $2 }')
          rm -f "${dup}"
        done
      for plugindir in ${HOME}/.config/ranger.bak$$/plugins/*; do
        [ "${plugindir}" == "${HOME}/.config/ranger.bak$$/plugins/*" ] && continue
        rmdir --ignore-fail-on-non-empty "${plugindir}"
      done
      rmdir --ignore-fail-on-non-empty ${HOME}/.config/ranger.bak$$/plugins
      rmdir --ignore-fail-on-non-empty ${HOME}/.config/ranger.bak$$
    }
  else
    printf "\nInstallation of ranger requires 'make' but 'make' not found."
    printf "\nInstall 'make' and try again. Skipping installation of ranger.\n"
    prompt_continue
  fi
}

kitty-fontminus() {
  size="$1"
  first_size=${size::1}
  if [[ "${first_size}" == "-" ]]; then
    kitty @ ${SOCKET} set-font-size ${OPTS} -- $size
    [ $? -eq 0 ] || {
      exit_warning "kitty @ ${SOCKET} set-font-size ${OPTS} -- $size"
    }
    [ "${debug}" ] && {
      printf "\nDEBUG: kitty @ ${SOCKET} set-font-size ${OPTS} -- $size\n"
      prompt_continue
    }
  else
    kitty @ ${SOCKET} set-font-size ${OPTS} -- -$size
    [ $? -eq 0 ] || {
      exit_warning "kitty @ ${SOCKET} set-font-size ${OPTS} -- -$size"
    }
    [ "${debug}" ] && {
      printf "\nDEBUG: kitty @ ${SOCKET} set-font-size ${OPTS} -- -$size\n"
      prompt_continue
    }
  fi
}

kitty-fontplus() {
  size="$1"
  first_size=${size::1}
  if [[ "${first_size}" == "+" ]]; then
    kitty @ ${SOCKET} set-font-size ${OPTS} $size
    [ $? -eq 0 ] || {
      exit_warning "kitty @ ${SOCKET} set-font-size ${OPTS} $size"
    }
    [ "${debug}" ] && {
      printf "\nDEBUG: kitty @ ${SOCKET} set-font-size ${OPTS} $size\n"
      prompt_continue
    }
  else
    kitty @ ${SOCKET} set-font-size ${OPTS} +$size
    [ $? -eq 0 ] || {
      exit_warning "kitty @ ${SOCKET} set-font-size ${OPTS} +$size"
    }
    [ "${debug}" ] && {
      printf "\nDEBUG: kitty @ ${SOCKET} set-font-size ${OPTS} +$size\n"
      prompt_continue
    }
  fi
}

kitty-fontsize() {
  size="$1"
  first_size=${size::1}
  if [[ "${first_size}" == "-" ]]; then
    kitty @ ${SOCKET} set-font-size ${OPTS} -- $size
    [ $? -eq 0 ] || {
      exit_warning "kitty @ ${SOCKET} set-font-size ${OPTS} -- $size"
    }
    [ "${debug}" ] && {
      printf "\nDEBUG: kitty @ ${SOCKET} set-font-size ${OPTS} -- $size\n"
      prompt_continue
    }
  else
    kitty @ ${SOCKET} set-font-size ${OPTS} $size
    [ $? -eq 0 ] || {
      exit_warning "kitty @ ${SOCKET} set-font-size ${OPTS} $size"
    }
    [ "${debug}" ] && {
      printf "\nDEBUG: kitty @ ${SOCKET} set-font-size ${OPTS} $size\n"
      prompt_continue
    }
  fi
}

# This is why we have standards
map_colors() {
  case "$1" in
    black | red | green | yellow | blue | magenta | cyan | white | purple | orchid | tan | violet)
      printf "$1"
      ;;
    chartreuse | cornsilk | gold | thistle | pink | wheat | orange | plum | salmon)
      printf "%s1" "$1"
      ;;
    navy | navyblue)
      printf "navy_blue"
      ;;
    darkblue)
      printf "dark_blue"
      ;;
    darkgreen)
      printf "dark_green"
      ;;
    darkcyan)
      printf "dark_cyan"
      ;;
    lightcyan)
      printf "light_cyan1"
      ;;
    navajowhite)
      printf "navajo_white1"
      ;;
    seagreen)
      printf "sea_green1"
      ;;
    darkseagreen)
      printf "dark_sea_green"
      ;;
    lightseagreen)
      printf "light_sea_green"
      ;;
    mediumseagreen)
      printf "sea_green2"
      ;;
    turquoise)
      printf "turquoise2"
      ;;
    darkturquoise)
      printf "dark_turquoise"
      ;;
    mediumturquoise)
      printf "medium_turquoise"
      ;;
    mediumspringgreen)
      printf "medium_spring_green"
      ;;
    springgreen)
      printf "spring_green1"
      ;;
    skyblue)
      printf "sky_blue1"
      ;;
    deepskyblue)
      printf "deep_sky_blue1"
      ;;
    lightskyblue)
      printf "light_sky_blue1"
      ;;
    blueviolet)
      printf "blue_violet"
      ;;
    steelblue)
      printf "steel_blue"
      ;;
    coral)
      printf "light_coral"
      ;;
    cornflowerblue)
      printf "cornflower_blue"
      ;;
    cadetblue)
      printf "cadet_blue"
      ;;
    dodgerblue)
      printf "dodger_blue1"
      ;;
    darkred | maroon)
      printf "dark_red"
      ;;
    darkmagenta)
      printf "dark_magenta"
      ;;
    gray | grey)
      printf "grey66"
      ;;
    goldenrod)
      printf "gold3"
      ;;
    darkgoldenrod)
      printf "dark_goldenrod"
      ;;
    lightgoldenrod)
      printf "light_goldenrod1"
      ;;
    lightgoldenrodyellow)
      printf "light_goldenrod3"
      ;;
    lightyellow)
      printf "light_yellow3"
      ;;
    mistyrose)
      printf "misty_rose1"
      ;;
    palegoldenrod)
      printf "light_goldenrod2"
      ;;
    palegreen)
      printf "pale_green1"
      ;;
    paleturquoise)
      printf "pale_turquoise1"
      ;;
    royalblue)
      printf "royal_blue1"
      ;;
    lightsalmon)
      printf "light_salmon1"
      ;;
    slategray | slategrey)
      printf "dark_slate_gray1"
      ;;
    darkslategray | darkslategrey)
      printf "dark_slate_gray2"
      ;;
    lightslategray | lightslategrey)
      printf "light_slate_grey"
      ;;
    darkolivegreen)
      printf "dark_olive_green1"
      ;;
    mediumpurple)
      printf "medium_purple"
      ;;
    lightslateblue)
      printf "light_slate_blue"
      ;;
    slateblue)
      printf "slate_blue1"
      ;;
    lightgreen)
      printf "light_green"
      ;;
    mediumvioletred)
      printf "medium_violet_red"
      ;;
    palevioletred)
      printf "pale_violet_red1"
      ;;
    darkviolet)
      printf "dark_violet"
      ;;
    mediumorchid)
      printf "medium_orchid"
      ;;
    rosybrown)
      printf "rosy_brown"
      ;;
    darkkhaki)
      printf "dark_khaki"
      ;;
    lightsteelblue)
      printf "light_steel_blue"
      ;;
    greenyellow)
      printf "green_yellow"
      ;;
    indianred)
      printf "indian_red"
      ;;
    hotpink)
      printf "hot_pink"
      ;;
    orangered)
      printf "orange_red1"
      ;;
    darkorange)
      printf "dark_orange"
      ;;
    lightcoral)
      printf "light_coral"
      ;;
    deeppink)
      printf "deep_pink1"
      ;;
    lightpink)
      printf "light_pink1"
      ;;
    sandybrown)
      printf "sandy_brown"
      ;;
    yellowgreen)
      printf "green_yellow"
      ;;
    *)
      printf "none"
      ;;
  esac
}

list_colors() {
  local cols=()
  local numc=0
  local richtext=
  if [ "$1" == "brief" ]; then
    heading "Supported Kitty Primary Color Names" "Color Names"
    cols=("${primary_colors[@]}")
    numcols=3
    spaces=11
  else
    heading "Supported Kitty Color Names" "Color Names"
    cols=("${colors[@]}")
    numcols=2
    spaces=17
  fi
  for color_name in "${cols[@]}"; do
    case "${color_name}" in
      custom | reset)
        continue
        ;;
      *)
        ((numc++))
        if [ "${have_rich}" ]; then
          rich_color=$(map_colors $(tolower "${color_name}"))
          namelen=$(echo "${color_name}" | wc -c)
          numspaces=$((spaces - namelen))
          [ ${numspaces} -lt 1 ] && numspaces=0
          while [ ${numspaces} -gt 0 ]; do
            color_name="${color_name} "
            ((numspaces--))
          done
          if [ ${numc} -gt ${numcols} ]; then
            if [ "${rich_color}" == "none" ]; then
              rich "${richtext}          ${color_name}" -p
            else
              rich "${richtext} [${rich_color}]########[/] ${color_name}" -p
            fi
            numc=0
            richtext=
          else
            if [ "${rich_color}" == "none" ]; then
              richtext="${richtext}          ${color_name}"
            else
              richtext="${richtext} [${rich_color}]########[/] ${color_name}"
            fi
          fi
        else
          if [ ${numc} -gt ${numcols} ]; then
            printf "\n${color_name}"
            numc=0
          else
            printf "\t${color_name}"
          fi
        fi
        ;;
    esac
  done
  [ "${have_rich}" ] && [ ${numc} -gt 0 ] && rich "${richtext}" -p
  printf "\n"
  [ "$1" == "brief" ] && {
    [ "$2" == "more" ] || {
      if [ "${have_rich}" ]; then
        rich "For a full list of supported color names use [red]kitty-control list colors[/]" -p
      else
        printf "\nFor a full list of supported color names use 'kitty-control list colors'\n"
      fi
    }
  }
}

open_kitty_doc() {
  kitty @ ${SOCKET} action show_kitty_doc "$1"
  [ $? -eq 0 ] || {
    exit_warning "kitty @ ${SOCKET} action show_kitty_doc $1"
  }
}

load_config_file() {
  cfgfile="$1"
  if [ "${USE_LOAD_CONFIG}" ]; then
    kitty @ ${SOCKET} load-config "${cfgfile}"
    [ $? -eq 0 ] || {
      exit_warning "kitty @ ${SOCKET} load-config ${cfgfile}"
    }
    [ "${debug}" ] && {
      printf "\nDEBUG: kitty @ ${SOCKET} load-config ${cfgfile}"
      prompt_continue
    }
  else
    kitty @ ${SOCKET} kitten kc_read_config.py "${cfgfile}"
    [ $? -eq 0 ] || {
      exit_warning "kitty @ ${SOCKET} kitten kc_read_config.py ${cfgfile}"
    }
    [ "${debug}" ] && {
      printf "\nDEBUG: kitty @ ${SOCKET} kitten kc_read_config.py ${cfgfile}"
      prompt_continue
    }
  fi
}

load-config() {
  if [ "$1" == "--help" ]; then
    printf "\nThe 'kitty-control load <subdir>' command loads the Kitty configuration"
    printf "\nfile in '~/.config/kitty/<subdir>/kitty.conf'. The current instance of"
    printf "\nkitty continues to run and the specified configuration file is loaded."
    printf "\nAll tabs and state are preserved while the new configuration is loaded."
    printf "\n\nThe new Kitty configuration file must be prepared beforehand and located"
    printf "\nin the specified subdirectory in the Kitty configuration folder."
    printf "\n\nFor example, if you have one Kitty configuration used for a large screen"
    printf "\nTV and another used for a laptop then placing the TV Kitty configuration"
    printf "\nin ~/.config/kitty/tv/kitty.conf and the laptop Kitty configuration in"
    printf "\n~/.config/kitty/laptop/kitty.conf would allow you to switch between these"
    printf "\ntwo Kitty configurations with kitty-control as follows:"
    printf "\n\tkitty-control load tv # When your display is the TV as monitor"
    printf "\n\tkitty-control load laptop # When you're using the laptop built-in display"
    printf "\n\nTo restore the Kitty configuration in ~/.config/kitty/kitty.conf:"
    printf "\n\tkitty-control load default\n\n"
    exit 0
  else
    bn=$(basename "$1")
    if [ -f "$1" ] && [ "${bn}" == "kitty.conf" ]; then
      load_config_file "$1"
    else
      kcfg="$1/kitty.conf"
      [ "$1" == "default" ] && kcfg="kitty.conf"
      if [ -f "${CONFDIR}/${kcfg}" ]; then
        load_config_file "${CONFDIR}/${kcfg}"
      else
        if [ "$2" ] && [ -f "${CONFDIR}/$2/kitty.conf" ]; then
          kcfg="$2/kitty.conf"
          load_config_file "${CONFDIR}/${kcfg}"
        else
          printf "\n ${CONFDIR}/${kcfg} does not exist or is not a regular file\n"
          prompt_continue
        fi
      fi
    fi
  fi
}

# colorize man pages
# man() {
#   LESS_TERMCAP_mb=$'\e[01;31m' \
#     LESS_TERMCAP_md=$'\e[01;35m' \
#     LESS_TERMCAP_me=$'\e[0m' \
#     LESS_TERMCAP_se=$'\e[0m' \
#     LESS_TERMCAP_so=$'\e[01;33m' \
#     LESS_TERMCAP_ue=$'\e[0m' \
#     LESS_TERMCAP_us=$'\e[04;36m' \
#     command man "$@"
# }
# Using tput
man() {
  LESS_TERMCAP_md=$(
    tput bold
    tput setaf 6
  ) \
  LESS_TERMCAP_me=$(tput sgr0) \
  LESS_TERMCAP_so=$(
    tput bold
    tput setaf 3
    tput setab 57
  ) \
  LESS_TERMCAP_se=$(
    tput rmso
    tput sgr0
  ) \
  LESS_TERMCAP_us=$(
    tput smul
    tput bold
    tput setaf 4
  ) \
  LESS_TERMCAP_ue=$(
    tput rmul
    tput sgr0
  ) \
  LESS_TERMCAP_mr=$(tput rev) \
  LESS_TERMCAP_mh=$(tput dim) \
    command man "$@"
}

set-bg-image() {
  image="$1"
  if [ "${image}" == "none" ]; then
    kitty @ ${SOCKET} set-background-image --no-response ${OPTS} none
    [ $? -eq 0 ] || {
      exit_warning "kitty @ ${SOCKET} set-background-image --no-response ${OPTS} none"
    }
    [ "${debug}" ] && {
      printf "\nDEBUG: kitty @ ${SOCKET} set-background-image --no-response ${OPTS} none\n"
      prompt_continue
    }
  else
    if [ -f "${image}" ]; then
      kitty @ ${SOCKET} set-background-image --layout scaled ${OPTS} "${image}"
      [ $? -eq 0 ] || {
        exit_warning "kitty @ ${SOCKET} set-background-image --layout scaled ${OPTS} ${image}"
      }
      [ "${debug}" ] && {
        printf "\nDEBUG: kitty @ ${SOCKET} set-background-image --layout scaled ${OPTS} ${image}"
        prompt_continue
      }
    else
      printf "\nSpecified Kitty background image ${image} not found\n"
      prompt_continue
    fi
  fi
}

set-background() {
  if [ "$1" == "reset" ]; then
    kitty @ ${SOCKET} set-colors ${OPTS} --reset
    [ $? -eq 0 ] || {
      exit_warning "kitty @ ${SOCKET} set-colors ${OPTS} --reset"
    }
    [ "${debug}" ] && {
      printf "\nDEBUG: kitty @ ${SOCKET} set-colors ${OPTS} --reset\n"
      prompt_continue
    }
  else
    kitty @ ${SOCKET} set-colors ${OPTS} -c background="$1" tab_bar_background="$1"
    [ $? -eq 0 ] || {
      exit_warning "kitty @ ${SOCKET} set-colors ${OPTS} -c background=$1 tab_bar_background=$1"
    }
    [ "${debug}" ] && {
      printf "\nDEBUG: kitty @ ${SOCKET} set-colors ${OPTS} -c background=$1 tab_bar_background=$1\n"
      prompt_continue
    }
  fi
}

set-foreground() {
  if [ "$1" == "reset" ]; then
    kitty @ ${SOCKET} set-colors ${OPTS} --reset
    [ $? -eq 0 ] || {
      exit_warning "kitty @ ${SOCKET} set-colors ${OPTS} --reset"
    }
    [ "${debug}" ] && {
      printf "\nDEBUG: kitty @ ${SOCKET} set-colors ${OPTS} --reset\n"
      prompt_continue
    }
  else
    kitty @ ${SOCKET} set-colors ${OPTS} -c foreground="$1"
    [ $? -eq 0 ] || {
      exit_warning "kitty @ ${SOCKET} set-colors ${OPTS} -c foreground=$1"
    }
    [ "${debug}" ] && {
      printf "\nDEBUG: kitty @ ${SOCKET} set-colors ${OPTS} -c foreground=$1\n"
      prompt_continue
    }
  fi
}

set-layout() {
  if [ "$1" == "Previous" ]; then
    kitty @ ${SOCKET} last-used-layout ${OPTS}
    [ $? -eq 0 ] || {
      exit_warning "kitty @ ${SOCKET} last-used-layout ${OPTS}"
    }
    [ "${debug}" ] && {
      printf "\nDEBUG: kitty @ ${SOCKET} last-used-layout ${OPTS}\n"
      prompt_continue
    }
  else
    kitty @ ${SOCKET} goto-layout ${OPTS} $1
    [ $? -eq 0 ] || {
      exit_warning "kitty @ ${SOCKET} goto-layout ${OPTS} $1"
    }
    [ "${debug}" ] && {
      printf "\nDEBUG: kitty @ ${SOCKET} goto-layout ${OPTS} $1\n"
      prompt_continue
    }
  fi
}

set-opacity() {
  kitty @ ${SOCKET} set-background-opacity ${OPTS} $1
  [ $? -eq 0 ] || {
    exit_warning "kitty @ ${SOCKET} set-background-opacity ${OPTS} $1" \
      "Verify that 'dynamic_background_opacity' is enabled in kitty.conf"
  }
  [ "${debug}" ] && {
    printf "\nDEBUG: kitty @ ${SOCKET} set-background-opacity ${OPTS} $1\n"
    prompt_continue
  }
}

set-window-size() {
  kitty @ ${SOCKET} resize-os-window --action resize --incremental --width "$1" --height "$2" ${OPTS}
  [ $? -eq 0 ] || {
    exit_warning "kitty @ ${SOCKET} resize-os-window --action resize --incremental --width $1 --height $2 ${OPTS}" \
      'Verify that "allow_remote_control" is enabled in kitty.conf.
Some systems do not support window resize.'
  }
  [ "${debug}" ] && {
    printf "\nDEBUG: kitty @ ${SOCKET} resize-os-window --incremental --action resize --width $1 --height $2 ${OPTS}\n"
    prompt_continue
  }
}

toggle-fullscreen() {
  kitty @ ${SOCKET} resize-os-window --action toggle-fullscreen ${OPTS}
  [ $? -eq 0 ] || {
    exit_warning "kitty @ ${SOCKET} resize-os-window --action toggle-fullscreen ${OPTS}"
  }
  [ "${debug}" ] && {
    printf "\nDEBUG: kitty @ ${SOCKET} resize-os-window --action toggle-fullscreen ${OPTS}\n"
    prompt_continue
  }
}

install_kitty() {
  if [ "${darwin}" ]; then
    LOCAL="/Applications/kitty.app/Contents"
    KBIN="${LOCAL}/MacOS"
    KTINFO="${LOCAL}/Resources/kitty/terminfo/kitty.terminfo"
    KXTERM="${LOCAL}/Resources/kitty/terminfo/78/xterm-kitty"
    KSTERM="${LOCAL}/Resources/terminfo/78/xterm-kitty"
  else
    LOCAL="${HOME}/.local/kitty.app"
    KBIN="${LOCAL}/bin"
    KTINFO="${LOCAL}/lib/kitty/terminfo/kitty.terminfo"
    KXTERM="${LOCAL}/lib/kitty/terminfo/x/xterm-kitty"
    KSTERM="${LOCAL}/share/terminfo/x/xterm-kitty"
  fi
  printf "\n\tInstalling/Upgrading Kitty terminal emulator ..."
  installer_url="https://sw.kovidgoyal.net/kitty/installer.sh"
  curl --silent --location ${installer_url} > /tmp/kitty-$$.sh
  [ $? -eq 0 ] || {
    rm -f /tmp/kitty-$$.sh
    curl --insecure --silent --location ${installer_url} > /tmp/kitty-$$.sh
    cat /tmp/kitty-$$.sh | sed -e "s/curl -/curl -k/" > /tmp/k$$
    cp /tmp/k$$ /tmp/kitty-$$.sh
    rm -f /tmp/k$$
  }
  if [ -s /tmp/kitty-$$.sh ]; then
    sh /tmp/kitty-$$.sh launch=n > /dev/null 2>&1
    rm -f /tmp/kitty-$$.sh
    # Create a symbolic link to add kitty to PATH
    [ -d ~/.local/bin ] || mkdir -p ~/.local/bin
    if [ -x ${KBIN}/kitty ]; then
      [ -x ~/.local/bin/kitty ] || {
        ln -s ${KBIN}/kitty ~/.local/bin/
      }
    else
      printf "\nUnable to create Kitty link to ~/.local/bin/\n"
    fi
    if [ -x ~/${KBIN}/kitten ]; then
      [ -x ~/.local/bin/kitten ] || {
        ln -s ~/${KBIN}/kitten ~/.local/bin/
      }
    else
      printf "\nUnable to create kitten link to ~/.local/bin/\n"
    fi
    # Link the kitty man pages somewhere it can be found by the man command
    if [ "${darwin}" ]; then
      LINMAN="/Applications/kitty.app/Contents/Resources/man"
    else
      LINMAN="${LOCAL}/share/man"
    fi
    [ -d ~/.local/share/man/man1 ] || mkdir -p ~/.local/share/man/man1
    [ -f ~/.local/share/man/man1/kitty.1 ] || {
      [ -d ${HOME}/.local/share/man/man1 ] || {
        mkdir -p ${HOME}/.local/share/man/man1
      }
      [ -f "${LINMAN}/man1/kitty.1" ] && {
        ln -s "${LINMAN}/man1/kitty.1" ~/.local/share/man/man1/
      }
    }
    [ -d ~/.local/share/man/man5 ] || mkdir -p ~/.local/share/man/man5
    [ -f ~/.local/share/man/man5/kitty.conf.5 ] || {
      [ -d ${HOME}/.local/share/man/man5 ] || {
        mkdir -p ${HOME}/.local/share/man/man5
      }
      [ -f "${LINMAN}/man5/kitty.conf.5" ] && {
        ln -s "${LINMAN}/man5/kitty.conf.5" ~/.local/share/man/man5/
      }
    }
    # Place the kitty.desktop file somewhere it can be found by the OS
    [ -d ~/.local/share/applications ] || mkdir -p ~/.local/share/applications
    [ -f "${LOCAL}/share/applications/kitty.desktop" ] && {
      [ -f ~/.local/share/applications/kitty.desktop ] || {
        cp ${LOCAL}/share/applications/kitty.desktop \
          ~/.local/share/applications/
      }
    }
    # If you want to open text files and images in kitty via your file manager
    # also add the kitty-open.desktop file
    [ -f "${LOCAL}/share/applications/kitty-open.desktop" ] && {
      [ -f ~/.local/share/applications/kitty-open.desktop ] || {
        cp ${LOCAL}/share/applications/kitty-open.desktop \
          ~/.local/share/applications/
      }
    }
    # Update the paths to the kitty and its icon in the kitty.desktop file(s)
    for desktop in "${HOME}"/.local/share/applications/kitty*.desktop; do
      [ "${desktop}" == "${HOME}/.local/share/applications/kitty*.desktop" ] && continue
      [ -f ${LOCAL}/share/icons/hicolor/256x256/apps/kitty.png ] && {
        sed -i "s|Icon=kitty|Icon=${LOCAL}/share/icons/hicolor/256x256/apps/kitty.png|g" "${desktop}"
      }
      [ -x ${LOCAL}/bin/kitty ] && {
        sed -i "s|Exec=kitty|Exec=${LOCAL}/bin/kitty|g" "${desktop}"
      }
    done
    printf " done!\n"
  else
    printf "\n${BOLD}ERROR:${NORM} Download of kitty installation script failed"
    printf "\nSee https://sw.kovidgoyal.net/kitty/binary/#manually-installing"
    printf "\nto manually install the kitty terminal emulator\n"
  fi

  # Install the Kitty terminfo entry
  KITERM="${HOME}/.terminfo/x/xterm-kitty"
  MATERM="${HOME}/.terminfo/78/xterm-kitty"
  [ -f "${KITERM}" ] || [ -f "${MATERM}" ] || {
    [ -d ${HOME}/.terminfo ] || mkdir -p ${HOME}/.terminfo
    [ -d ${HOME}/.terminfo/x ] || mkdir -p ${HOME}/.terminfo/x
    [ -d ${HOME}/.terminfo/78 ] || mkdir -p ${HOME}/.terminfo/78
    have_tic=$(type -p tic)
    [ "${have_tic}" ] && {
      [ -f "${KTINFO}" ] && {
        tic -x -o ${HOME}/.terminfo "${KTINFO}" > /dev/null 2>&1
      }
    }
    [ -f "${KITERM}" ] || [ -f "${MATERM}" ] || {
      if [ -f "${KXTERM}" ]; then
        cp "${KXTERM}" "${KITERM}"
      else
        if [ -f "${KSTERM}" ]; then
          cp "${KSTERM}" "${KITERM}"
        else
          printf "\nUnable to create Kitty terminfo entry ${KITERM}\n"
        fi
      fi
    }
  }
}

upgrade_fzf() {
  [ -d ${HOME}/.fzf/.git ] && git -C ${HOME}/.fzf pull > /dev/null 2>&1
  if [ -d ${HOME}/.fzf ]; then
    if [ -f ${HOME}/.fzf/install ]; then
      chmod 755 ${HOME}/.fzf/install
      ${HOME}/.fzf/install --all > /dev/null 2>&1
    else
      install_fzf
    fi
  else
    [ "${have_brew}" ] && brew uninstall fzf > /dev/null 2>&1
    install_fzf
  fi
  [ -d ${HOME}/.fzf/bin ] && pathadd "${HOME}/.fzf/bin"
}

upgrade_kitty_control() {
  KC_REPO="https://github.com/doctorfree/kitty-control"
  git clone ${KC_REPO} /tmp/kctmp$$ > /dev/null 2>&1
  [ -f /tmp/kctmp$$/install ] || {
    rm -rf /tmp/kctmp$$
    printf "\nERROR: unable to download kitty-control repository\n"
    if [ "$1" == "noexit" ]; then
      prompt_continue
    else
      exit 1
    fi
  }
  chmod 755 /tmp/kctmp$$/install
  /tmp/kctmp$$/install
  rm -rf /tmp/kctmp$$
  install_version=$(get_install_version)
  VERSION=$(echo ${install_version} | awk -F 'r' '{ print $1 }' | sed -e "s/v//")
  RELEASE=$(echo ${install_version} | awk -F 'r' '{ print $2 }')
  Where_Am_I=$(readlink -f "$0")
  exec "${Where_Am_I}"
}

heading() {
  clear_screen
  if [ "${have_rich}" ]; then
    rich "[cyan]$1[/cyan]" -p -a rounded -c -C
  else
    if [ "${use_figlet}" ]; then
      show_figlet "$2"
    else
      printf "\n$1\n"
    fi
  fi
  printf "\n"
}

choose_file() {
  TMP="$(mktemp)"
  ranger --choosefile="${TMP}" "${HOME}" 1>&2
  cat ${TMP}
  rm -f ${TMP}
}

choose_folder() {
  TMP="$(mktemp)"
  ranger --choosedir="${TMP}" "${HOME}" 1>&2
  cat ${TMP}
  rm -f ${TMP}
}

select_file() {
  # Can be called with e.g. 'select_file image' to use 'image' as file type
  # If no argument is passed then any file will do
  keyword=
  selectedFile=
  [ "$1" ] && keyword="$1"
  if [ "${use_ranger}" ]; then
    selectedFile="$(choose_file)"
  else
    printf "\nEnter the path to a file\n"
    while true; do
      read -r -p "Enter file path ('q' to exit): " filepath
      [ "${filepath}" == "q" ] && break
      if [ -f "${filepath}" ]; then
        selectedFile="${filepath}"
        break
      else
        if [ "${filepath}" ]; then
          printf "Specified file ${filepath} does not exist or is not a plain file."
        else
          printf "\nEmpty file path entered."
        fi
        printf "\nPlease enter a valid file path or 'q' to exit this dialog.\n"
      fi
    done
  fi
  if [ "${selectedFile}" ]; then
    if [ "${keyword}" ]; then
      thisfile=
      file -L "${selectedFile}" | grep -i "${keyword}" > /dev/null && thisfile=1
    else
      thisfile=1
    fi
    [ "${thisfile}" ] && FILE="${selectedFile}"
  else
    FILE=
  fi
}

select_folder() {
  FOLD=
  if [ "${use_ranger}" ]; then
    echo ""
    echo "Choosing a directory in Ranger is done by visiting a directory"
    echo ""
    echo "Use the arrow keys to browse folders"
    echo "Press 'Enter' to enter a directory"
    echo "Create a new directory with ':mkdir <dirname>'"
    echo ""
    echo "While in the directory you wish to select, quit Ranger with 'q'"
    echo ""
    while true; do
      read -p "Select directory now? (y/n) " answer
      case ${answer} in
        [Yy]*)
          FOLD="$(choose_folder)"
          echo ""
          echo "Selected directory = ${FOLD}"
          echo ""
          break
          ;;
        [Nn]*)
          printf "\nSkipping directory selection.\n"
          FOLD=
          break
          ;;
        *)
          echo "Please answer 'y' to select directory, or 'n' to skip."
          ;;
      esac
    done
  else
    printf "\nEnter the path to a directory\n"
    while true; do
      read -r -p "Enter directory path ('q' to exit): " foldpath
      [ "${foldpath}" == "q" ] && break
      if [ -d "${foldpath}" ]; then
        FOLD="${foldpath}"
        break
      else
        if [ "${foldpath}" ]; then
          printf "Specified directory ${foldpath} does not exist or is not a directory."
        else
          printf "\nEmpty directory path entered."
        fi
        printf "\nPlease enter a valid directory path or 'q' to exit this dialog.\n"
      fi
    done
  fi
}

set_haves() {
  have_brew=$(type -p brew)
  have_curl=$(type -p curl)
  have_fetch=
  have_fastfetch=$(type -p fastfetch)
  have_neofetch=$(type -p neofetch)
  if [ "${have_fastfetch}" ]; then
    have_fetch=1
  else
    [ "${have_neofetch}" ] && have_fetch=1
  fi
  have_figlet=$(type -p figlet)
  have_fzf=$(type -p fzf)
  have_gcc=$(type -p gcc)
  have_jq=$(type -p jq)
  have_kitty=$(type -p kitty)
  have_lolcat=$(type -p lolcat)
  have_make=$(type -p make)
  have_ranger=$(type -p ranger)
  have_rich=$(type -p rich)
  have_wget=$(type -p wget)
}

show_figlet() {
  if [ "$1" ]; then
    FIG_TEXT="$1"
  else
    FIG_TEXT="Kitty Control"
  fi
  # Seed random generator
  RANDOM=$$$(date +%s)
  USE_FONT=${fonts[$RANDOM % ${#fonts[@]}]}
  [ "${USE_FONT}" ] || USE_FONT="Standard"
  if [ "${have_lolcat}" ]; then
    figlet -c -d "${FONTDIR}" -f "${USE_FONT}" -k -t ${FIG_TEXT} 2> /dev/null | ${LOLCAT}
  else
    figlet -c -d "${FONTDIR}" -f "${USE_FONT}" -k -t ${FIG_TEXT} 2> /dev/null
  fi
}

show_usage() {
  figlet_text="Usage"
  while true; do
    clear_screen
    if [ "${have_rich}" ]; then
      rich "[cyan]${figlet_text}[/cyan]" -p -a rounded -c -C
    else
      [ "${use_figlet}" ] && show_figlet "${figlet_text}"
    fi
    brief_usage noexit
    show_versions
    options=("Examples" "Full Usage" "About" "Main Menu" "Quit (q)")
    if [ "${use_fzf}" ]; then
      choice=$(printf "%s\n" "${options[@]}" | fzf --prompt="ðŸ˜º Select option ('Esc' or 'Main Menu' to return) ï˜½ " --height=8 --layout=reverse --exit-0)
      if [ "${choice}" ]; then
        case "${choice}" in
          About* | about* | a)
            show_about
            prompt_continue
            ;;
          Exam* | exam* | e)
            show_examples noexit | less
            ;;
          *Full* | *full* | f)
            usage noexit | less
            ;;
          Main* | main* | m)
            break
            ;;
          Quit* | quit* | q)
            heading "Exiting kitty-control" "Farewell"
            exit 0
            ;;
          *)
            printf "\nCould not match '${choice}' with an entry."
            printf "\nPlease try again with an exact match.\n"
            ;;
        esac
      else
        break
      fi
    else
      PS3="${BOLD}Enter a choice (number, shortcut, or text, 'h' help): ${NORM}"
      select opt in "${options[@]}"; do
        case "$opt,$REPLY" in
          "h",* | *,"h" | "H",* | *,"H" | "help",* | *,"help" | "Help",* | *,"Help")
            show_help
            break
            ;;
          "About"*,* | *,"About"* | "about"*,* | *,"about"* | "a",* | *,"a")
            show_about
            prompt_continue
            break
            ;;
          "Exam"*,* | *,"Exam"* | "exam"*,* | *,"exam"* | "e",* | *,"e")
            show_examples noexit | less
            break
            ;;
          *"Full"*,* | *,*"Full"* | *"full"*,* | *,*"full"* | "F",* | *,"F")
            usage noexit | less
            break
            ;;
          "Main"*,* | *,"Main"* | "main"*,* | *,"main"* | "m",* | *,"m")
            break 2
            ;;
          "Quit"*,* | *,"Quit"* | "quit"*,* | *,"quit"* | "q",* | *,"q")
            heading "Exiting kitty-control" "Farewell"
            exit 0
            ;;
          *,*)
            printf "\nCould not match '${REPLY}' with a menu entry."
            printf "\nPlease try again with an exact match.\n"
            break
            ;;
        esac
        REPLY=
      done
    fi
  done
}

prompt-color-input() {
  heading "Custom Color" "Custom Color"
  printf "\n"
  if [ "${have_rich}" ]; then
    rich "Enter a supported color name, hex color code, '[red]q[/]' to exit, or '[red]r[/]' to reset" -p
    rich "Valid color names can be found at:" -p
    rich "    [red]https://www.color-hex.com/color-names.html[/]" -p
    rich "Hex color codes are of the form '[red]#120f3d[/]' (the '[red]#[/]' prefix is required)" -p
    printf "\n"
    rich "Keyword '[red]reset[/]' will reset to the configured color" -p
  else
    printf "\n\nEnter a supported color name or hex color code, 'q' to exit, or 'r' to reset"
    printf "\nValid color names can be found at:"
    printf "\n\thttps://www.color-hex.com/color-names.html"
    printf "\nHex color codes are of the form '#120f3d' (the '#' prefix is required)\n"
    printf "\nKeyword 'reset' will reset to the configured color\n"
  fi
  printf "\n"
}

prompt-match-input() {
  clear_screen
  if [ "${have_rich}" ]; then
    rich "[cyan]Tab/Window Matching Specification[/cyan]" -p -a rounded -c -C
  else
    if [ "${use_figlet}" ]; then
      show_figlet "Match Spec"
    else
      printf "\n\nTab/Window Matching Specification\n\n"
    fi
  fi
  printf "\n"
  if [ "${have_rich}" ]; then
    rich "Kitty remote control commands can be limited to matching tabs or windows" -p
    rich "by providing a specification that matches the tabs/windows you want to effect." -p
    printf "\n"
    rich "You can use [red]kitty-control list[/] to get a full list of tabs and windows" -p
    [ "${have_jq}" ] && {
      rich "Or [red]kitty-control ls[/] for an abbreviated list of windows" -p
    }
    printf "\n"
    rich "Match specifications are of the form: [red]field:query[/] where field can be one of:" -p
    rich "  [green]id index title window_id window_title pid cwd var state recent[/]" -p
    rich "[red]query[/] is the expression to match. Expressions can be either a number or a" -p
    rich "regular expression, and can be combined using Boolean operators." -p
    printf "\n"
    rich "The special value [red]all[/] matches all tabs/windows." -p
  else
    printf "\n\nKitty remote control commands can be limited to matching tabs or windows"
    printf "\nby providing a specification that matches the tabs/windows you want to effect."
    printf "\n\nYou can use 'kitty-control list' to get a full list of tabs and windows"
    [ "${have_jq}" ] && {
      printf "\nOr 'kitty-control ls' for an abbreviated list of windows"
    }
    printf "\n\nMatch specifications are of the form: 'field:query' where field can be one of:"
    printf "\n  id, index, title, window_id, window_title, pid, cwd, var, state and recent"
    printf "\n'query' is the expression to match. Expressions can be either a number or a"
    printf "\nregular expression, and can be combined using Boolean operators."
    printf "\n\nThe special value 'all' matches all tabs/windows.\n"
  fi
  printf "\n"
}

get_tabopts() {
  if [ "$1" ]; then
    tabop_return="$1"
  else
    tabop_return=
  fi
  while true; do
    read -r -p \
      "Enter tab matching specification ('q' to exit): " \
      -i "${tabop_return}" -e tabmatch
    [ "${tabmatch}" == "q" ] && break
    case ${tabmatch} in
      "-t "*)
        tabop_return=$(echo "${tabmatch}" | sed -e "s/-t //")
        break
        ;;
      "--match-tab "*)
        tabop_return=$(echo "${tabmatch}" | sed -e "s/--match-tab //")
        break
        ;;
      *)
        tabop_return="${tabmatch}"
        break
        ;;
    esac
  done
  echo "${tabop_return}"
}

get_winopts() {
  if [ "$1" ]; then
    winop_return="$1"
  else
    winop_return=
  fi
  while true; do
    read -r -p \
      "Enter window matching specification ('q' to exit): " \
      -i "${winop_return}" -e winmatch
    [ "${winmatch}" == "q" ] && break
    case ${winmatch} in
      "-t "*)
        winop_return=$(echo "${winmatch}" | sed -e "s/-t //")
        break
        ;;
      "--match "*)
        winop_return=$(echo "${winmatch}" | sed -e "s/--match //")
        break
        ;;
      *)
        winop_return="${winmatch}"
        break
        ;;
    esac
  done
  echo "${winop_return}"
}

get-color-input() {
  color_return=
  while true; do
    read -r -p "Enter color name/code ('r' to reset, 'q' to exit): " colorcode
    case ${colorcode} in
      "Quit"* | "Exit"* | "quit"* | "exit"* | "q" | "e")
        break
        ;;
      "Reset"* | "reset"* | "r")
        color_return="reset"
        break
        ;;
      "")
        printf "\nEmpty color. Enter a color name, code, or 'q'\n"
        prompt_continue
        ;;
      *)
        color_return=$(tolower "${colorcode}")
        break
        ;;
    esac
  done
  echo "${color_return}"
}

list_tabs() {
  printf -v newline %b "\n"
  kitty @ ${SOCKET} ls ${OPTS} | jq -r '.[]?.tabs' \
    | jq -r '.[]' \
    | jq -r --color-output \
      --arg idpre "ID: " \
      --arg actpre "ACTIVE: " \
      --arg pidpre "PID: " \
      --arg titpre "TITLE: " \
      --arg tipost "$newline" \
      '$idpre + (.id|tostring), $actpre + (.is_active|tostring), $pidpre + (.pid|tostring), $titpre + .title + $tipost'
}

list_windows() {
  printf -v newline %b "\n"
  kitty @ ${SOCKET} ls ${OPTS} | jq -r '.[]?.tabs | .[]?.windows' \
    | jq -r '.[]' \
    | jq -r --color-output \
      --arg idpre "ID: " \
      --arg actpre "ACTIVE: " \
      --arg pidpre "PID: " \
      --arg titpre "TITLE: " \
      --arg tipost "$newline" \
      '$idpre + (.id|tostring), $actpre + (.is_active|tostring), $pidpre + (.pid|tostring), $titpre + .title + $tipost'
}

show_tab_info() {
  tab_id=$(echo "$1" | awk '{ print $2 }')
  [ "${tab_id}" ] && {
    [ "${debug}" ] && {
      printf "\nSelected Tab ID: ${tab_id}\n"
      printf "\nCommand: kitty @ ls | jq -r '.[]?.tabs | jq -r --arg tabid \"$tab_id\" '.[] | select((.id|tostring) == \$tabid)'\n"
      prompt_continue
    }
    if [ "${tab_id}" == "__all__" ]; then
      kitty @ ls | jq -r '.[]?.tabs' \
        | jq -r --color-output '.[]' | less
    else
      kitty @ ls | jq -r '.[]?.tabs' \
        | jq -r --color-output --arg tabid "$tab_id" '
                     .[] | select((.id|tostring) == $tabid)' | less
    fi
  }
}

show_window_info() {
  window_id=$(echo "$1" | awk '{ print $2 }')
  [ "${window_id}" ] && {
    [ "${debug}" ] && {
      printf "\nSelected Window ID: ${window_id}\n"
      printf "\nCommand: kitty @ ls | jq -r '.[]?.tabs | .[]?.windows' | jq -r --arg winid \"$window_id\" '.[] | select((.id|tostring) == \$winid)'\n"
      prompt_continue
    }
    if [ "${window_id}" == "__all__" ]; then
      kitty @ ls | jq -r '.[]?.tabs | .[]?.windows' \
        | jq -r --color-output '.[]' | less
    else
      kitty @ ls | jq -r '.[]?.tabs | .[]?.windows' \
        | jq -r --color-output --arg winid "$window_id" '
                     .[] | select((.id|tostring) == $winid)' | less
    fi
  }
}

open_doc_menu() {
  doc_array=("Kitty Configuration" "Kitty FAQ" "Kitty Man Page" "Kitty Remote Control" "Kitty Diff Kitten" "Kitty icat Kitten" "Kitty Layouts" "Kitty SSH Kitten" "Kitty Themes Kitten" "Kitty Unicode Kitten" "Kitty-Control" "Help" "Main Menu" "Quit")
  if [ "${use_fzf}" ]; then
    while true; do
      heading "Kitty Documentation Menu" "Kitty Doc"
      choice=$(printf "%s\n" "${doc_array[@]}" | fzf --prompt="ðŸ˜º Select Doc to Open ('Esc' or 'Main Menu' to return)  ï˜½ " --height=18 --layout=reverse --exit-0)
      if [ "${choice}" ]; then
        case "${choice}" in
          "Help")
            show_help
            ;;
          "Main"*)
            break
            ;;
          "Quit"*)
            heading "Exiting kitty-control" "Farewell"
            exit 0
            ;;
          "Kitty Conf"* | "kitty conf"*)
            open_kitty_doc conf
            ;;
          "Kitty FAQ"* | "kitty faq"*)
            open_kitty_doc faq
            ;;
          "Kitty Remote"* | "kitty remote"*)
            open_kitty_doc remote-control
            ;;
          "Kitty Diff"* | "kitty diff"*)
            open_kitty_doc kittens/diff
            ;;
          "Kitty icat"* | "kitty icat"*)
            open_kitty_doc kittens/icat
            ;;
          "Kitty Layout"* | "kitty layout"*)
            open_kitty_doc layouts
            ;;
          "Kitty SSH"* | "kitty ssh"*)
            open_kitty_doc kittens/ssh
            ;;
          "Kitty Them"* | "kitty them"*)
            open_kitty_doc kittens/themes
            ;;
          "Kitty Uni"* | "kitty uni"*)
            open_kitty_doc kittens/unicode_input
            ;;
          "Kitty Man"* | "kitty man"*)
            printf "\n"
            man kitty
            ;;
          "Kitty-Control"* | "kitty-control"*)
            printf "\n"
            man kitty-control
            ;;
          *)
            open_kitty_doc "${choice}"
            ;;
        esac
      else
        break
      fi
    done
  else
    while true; do
      heading "Kitty Documentation Menu" "Kitty Doc"
      PS3="${BOLD}Select Doc to Open (number, shortcut, or text, 'h' help): ${NORM}"
      select subopt in "${doc_array[@]}"; do
        case "$subopt,$REPLY" in
          "h",* | *,"h" | "H",* | *,"H" | "help",* | *,"help" | "Help",* | *,"Help")
            show_help
            break
            ;;
          "Main"*,* | *,"Main"* | "main"*,* | *,"main"*)
            break 2
            ;;
          "Quit"*,* | *,"Quit"* | "quit"*,* | *,"quit"* | "q",* | *,"q")
            heading "Exiting kitty-control" "Farewell"
            exit 0
            ;;
          "Kitty Conf"*,* | *,"Kitty Conf"* | "kitty conf"*,* | *,"kitty conf"*)
            open_kitty_doc conf
            break
            ;;
          "Kitty FAQ"*,* | *,"Kitty FAQ"* | "kitty faq"*,* | *,"kitty faq"*)
            open_kitty_doc faq
            break
            ;;
          "Kitty Remote"*,* | *,"Kitty Remote"* | "kitty remote"*,* | *,"kitty remote"*)
            open_kitty_doc remote-control
            break
            ;;
          "Kitty Diff"*,* | *,"Kitty Diff"* | "kitty diff"*,* | *,"kitty diff"*)
            open_kitty_doc kittens/diff
            break
            ;;
          "Kitty icat"*,* | *,"Kitty icat"* | "kitty icat"*,* | *,"kitty icat"*)
            open_kitty_doc kittens/icat
            break
            ;;
          "Kitty Layout"*,* | *,"Kitty Layout"* | "kitty layout"*,* | *,"kitty layout"*)
            open_kitty_doc layouts
            break
            ;;
          "Kitty SSH"*,* | *,"Kitty SSH"* | "kitty ssh"*,* | *,"kitty ssh"*)
            open_kitty_doc kittens/ssh
            break
            ;;
          "Kitty Them"*,* | *,"Kitty Them"* | "kitty them"*,* | *,"kitty them"*)
            open_kitty_doc kittens/themes
            break
            ;;
          "Kitty Uni"*,* | *,"Kitty Uni"* | "kitty uni"*,* | *,"kitty uni"*)
            open_kitty_doc kittens/unicode_input
            break
            ;;
          "Kitty Man"*,* | *,"Kitty Man"* | "kitty man"*,* | *,"kitty man"*)
            printf "\n"
            man kitty
            break
            ;;
          "Kitty-Control"*,* | *,"Kitty-Control"* | "kitty-control"*,* | *,"kitty-control"*)
            printf "\n"
            man kitty-control
            break
            ;;
          *,*)
            open_kitty_doc "${subopt}"
            break
            ;;
        esac
      done
    done
  fi
}

set_win_array() {
  while read id_title; do
    [ "${id_title}" ] || continue
    echo "${id_title}" | grep ID: > /dev/null && {
      entry="${id_title}"
    }
    echo "${id_title}" | grep TITLE: > /dev/null && {
      entry="${entry} ${id_title}"
      win_array+=("${entry}")
    }
  done < <(kitty @ ls | jq -r '.[]?.tabs | .[]?.windows' | jq -r '.[]' \
    | jq -r --arg idpre "ID: " \
      --arg titpre "TITLE: " \
      --arg tipost "$newline" \
      '$idpre + (.id|tostring), $titpre + .title + $tipost')
}

set_tab_array() {
  while read id_title; do
    [ "${id_title}" ] || continue
    echo "${id_title}" | grep ID: > /dev/null && {
      entry="${id_title}"
    }
    echo "${id_title}" | grep TITLE: > /dev/null && {
      entry="${entry} ${id_title}"
      tab_array+=("${entry}")
    }
  done < <(kitty @ ls | jq -r '.[]?.tabs' | jq -r '.[]' \
    | jq -r --arg idpre "ID: " \
      --arg titpre "TITLE: " \
      --arg tipost "$newline" \
      '$idpre + (.id|tostring), $titpre + .title + $tipost')
}

tab_title_menu() {
  tab_array=()
  printf -v newline %b "\n"
  set_tab_array

  tab_array+=("List Windows" "Help" "Main Menu" "Quit")
  while true; do
    heading "Select Tab to Title" "Select Tab"
    choice=$(printf "%s\n" "${tab_array[@]}" | fzf --prompt="ðŸ˜º Select Tab to Title ('Esc' or 'Main Menu' to return)  ï˜½ " --height=18 --layout=reverse --exit-0)
    if [ "${choice}" ]; then
      case "${choice}" in
        "Help")
          show_help
          ;;
        "Main"*)
          break
          ;;
        "Quit"*)
          heading "Exiting kitty-control" "Farewell"
          exit 0
          ;;
        "List Win"* | "list win"* | "w")
          windows_menu
          break
          ;;
        *)
          tabnum=$(echo "${choice}" | awk '{ print $2 }')
          read -r -p "Enter title for tab number ${tabnum} ('q' to exit): " tabtitle
          [ "${tabtitle}" == "q" ] && break
          [ "${tabtitle}" ] || break
          kitty @ ${SOCKET} set-tab-title --match id:${tabnum} "${tabtitle}"
          [ $? -eq 0 ] || {
            exit_warning "kitty @ ${SOCKET} set-tab-title --match id:${tabnum} ${tabtitle}"
          }
          break
          ;;
      esac
    else
      break
    fi
  done
}

window_title_menu() {
  win_array=()
  printf -v newline %b "\n"
  set_win_array

  win_array+=("List Tabs" "Help" "Main Menu" "Quit")
  while true; do
    heading "Select Window to Title" "Select Window"
    choice=$(printf "%s\n" "${win_array[@]}" | fzf --prompt="ðŸ˜º Select Window to Title ('Esc' or 'Main Menu' to return)  ï˜½ " --height=18 --layout=reverse --exit-0)
    if [ "${choice}" ]; then
      case "${choice}" in
        "Help")
          show_help
          ;;
        "Main"*)
          break
          ;;
        "Quit"*)
          heading "Exiting kitty-control" "Farewell"
          exit 0
          ;;
        "List Tab"* | "list tab"* | "k")
          tabs_menu
          break
          ;;
        *)
          winnum=$(echo "${choice}" | awk '{ print $2 }')
          read -r -p "Enter title for window number ${winnum} ('q' to exit): " wintitle
          [ "${wintitle}" == "q" ] && break
          [ "${wintitle}" ] || break
          kitty @ ${SOCKET} set-window-title --temporary --match id:${winnum} "${wintitle}"
          [ $? -eq 0 ] || {
            exit_warning "kitty @ ${SOCKET} set-window-title --temporary --match id:${winnum} ${wintitle}"
          }
          break
          ;;
      esac
    else
      break
    fi
  done
}

tabs_menu() {
  if [ "${have_jq}" ]; then
    tab_array=()
    printf -v newline %b "\n"
    set_tab_array

    tab_array+=("All Tabs" "Set Tab Title" "List Windows" "Help" "Main Menu" "Quit")
    if [ "${use_fzf}" ]; then
      while true; do
        heading "Kitty Tabs/Windows List" "Tabs/Windows"
        choice=$(printf "%s\n" "${tab_array[@]}" | fzf --prompt="ðŸ˜º Select Tab ('Esc' or 'Main Menu' to return)  ï˜½ " --height=18 --layout=reverse --exit-0)
        if [ "${choice}" ]; then
          case "${choice}" in
            "Help")
              show_help
              ;;
            "Main"*)
              break
              ;;
            "Quit"*)
              heading "Exiting kitty-control" "Farewell"
              exit 0
              ;;
            "All Tabs"*)
              show_tab_info "ID: __all__"
              ;;
            "Set Tab"* | "set tab"*)
              tab_title_menu
              break
              ;;
            "List Win"* | "list win"* | "w")
              windows_menu
              break
              ;;
            *)
              show_tab_info "${choice}"
              ;;
          esac
        else
          break
        fi
      done
    else
      while true; do
        heading "Kitty Tabs/Windows List" "Tabs/Windows"
        PS3="${BOLD}Select Tab (number, shortcut, or text, 'h' help): ${NORM}"
        select subopt in "${tab_array[@]}"; do
          case "$subopt,$REPLY" in
            "h",* | *,"h" | "H",* | *,"H" | "help",* | *,"help" | "Help",* | *,"Help")
              show_help
              break
              ;;
            "Main"*,* | *,"Main"* | "main"*,* | *,"main"*)
              break 2
              ;;
            "Quit"*,* | *,"Quit"* | "quit"*,* | *,"quit"* | "q",* | *,"q")
              heading "Exiting kitty-control" "Farewell"
              exit 0
              ;;
            "All Tabs"*,* | *,"All Tabs"* | "all tabs"*,* | *,"all tabs"*)
              show_tab_info "ID: __all__"
              ;;
            "Set Tab"*,* | *,"Set Tab"* | "set tab"*,* | *,"set tab"*)
              tab_title_menu
              break 2
              ;;
            "List Win"*,* | *,"List Win"* | "list win"*,* | *,"list win"*)
              windows_menu
              break 2
              ;;
            *,*)
              show_tab_info "${subopt}"
              break
              ;;
          esac
        done
      done
    fi
  else
    kitty @ ${SOCKET} ls ${OPTS} | less
  fi
}

windows_menu() {
  if [ "${have_jq}" ]; then
    win_array=()
    printf -v newline %b "\n"
    set_win_array

    win_array+=("All Windows" "Set Window Title" "List Tabs" "Help" "Main Menu" "Quit")
    if [ "${use_fzf}" ]; then
      while true; do
        heading "Kitty Windows List" "Kitty Windows"
        choice=$(printf "%s\n" "${win_array[@]}" | fzf --prompt="ðŸ˜º Select Window ('Esc' or 'Main Menu' to return)  ï˜½ " --height=18 --layout=reverse --exit-0)
        if [ "${choice}" ]; then
          case "${choice}" in
            "Help")
              show_help
              ;;
            "Main"*)
              break
              ;;
            "Quit"*)
              heading "Exiting kitty-control" "Farewell"
              exit 0
              ;;
            "All Windows"*)
              show_window_info "ID: __all__"
              ;;
            "Set Win"* | "set win"*)
              window_title_menu
              break
              ;;
            "List Tab"* | "list tab"* | "K")
              tabs_menu
              break
              ;;
            *)
              show_window_info "${choice}"
              ;;
          esac
        else
          break
        fi
      done
    else
      while true; do
        heading "Kitty Windows List" "Kitty Windows"
        PS3="${BOLD}Select Window (number, shortcut, or text, 'h' help): ${NORM}"
        select subopt in "${win_array[@]}"; do
          case "$subopt,$REPLY" in
            "h",* | *,"h" | "H",* | *,"H" | "help",* | *,"help" | "Help",* | *,"Help")
              show_help
              break
              ;;
            "Main"*,* | *,"Main"* | "main"*,* | *,"main"*)
              break 2
              ;;
            "Quit"*,* | *,"Quit"* | "quit"*,* | *,"quit"* | "q",* | *,"q")
              heading "Exiting kitty-control" "Farewell"
              exit 0
              ;;
            "All Windows"*,* | *,"All Windows"* | "all windows"*,* | *,"all windows"*)
              show_window_info "ID: __all__"
              ;;
            "List Tab"*,* | *,"List Tab"* | "list tab"*,* | *,"list tab"*)
              tabs_menu
              break 2
              ;;
            *,*)
              show_window_info "${subopt}"
              break
              ;;
          esac
        done
      done
    fi
  else
    kitty @ ${SOCKET} ls ${OPTS} | less
  fi
}

try_background() {
  color_choice="$1"
  if [ "${color_choice}" == "reset" ]; then
    set-background reset
  else
    forepre=$(kitty @ get-colors | grep "^foreground" | awk '{ print $2 }')
    backpre=$(kitty @ get-colors | grep "^background" | awk '{ print $2 }')
    set-background "${color_choice}"
    case "${color_choice}" in
      black)
        set-foreground white
        ;;
      white)
        set-foreground black
        ;;
      *)
        true
        ;;
    esac
    forecolor=$(kitty @ get-colors | grep "^foreground" | awk '{ print $2 }')
    backcolor=$(kitty @ get-colors | grep "^background" | awk '{ print $2 }')
    [ "${forecolor}" == "${backcolor}" ] && {
      set-foreground "${forepre}"
      set-background "${backpre}"
    }
  fi
}

try_foreground() {
  color_choice="$1"
  if [ "${color_choice}" == "reset" ]; then
    set-foreground reset
  else
    forepre=$(kitty @ get-colors | grep "^foreground" | awk '{ print $2 }')
    backpre=$(kitty @ get-colors | grep "^background" | awk '{ print $2 }')
    set-foreground "${color_choice}"
    forecolor=$(kitty @ get-colors | grep "^foreground" | awk '{ print $2 }')
    backcolor=$(kitty @ get-colors | grep "^background" | awk '{ print $2 }')
    [ "${forecolor}" == "${backcolor}" ] && {
      set-foreground "${forepre}"
      set-background "${backpre}"
    }
  fi
}

menu_background_color() {
  bgopts=("${colors[@]}")
  bgopts+=("main menu" "quit")
  if [ "${use_fzf}" ]; then
    while true; do
      heading "Background Color" "Background"
      choice=$(printf "%s\n" "${bgopts[@]}" | fzf --prompt="ðŸ˜º Select Background Color ('Esc' or 'main menu' to return) ï˜½ " --height=18 --layout=reverse --exit-0)
      if [ "${choice}" ]; then
        case "${choice}" in
          "h" | "H" | "help" | "Help")
            show_help
            ;;
          "custom"*)
            prompt-color-input
            color_choice=$(get-color-input)
            [ "${color_choice}" ] && try_background "${color_choice}"
            break
            ;;
          "main"*)
            break
            ;;
          "reset"*)
            set-background reset
            break
            ;;
          "quit"*)
            heading "Exiting kitty-control" "Farewell"
            exit 0
            ;;
          *)
            try_background "${choice}"
            break
            ;;
        esac
      else
        break
      fi
    done
  else
    while true; do
      heading "Background Color" "Background"
      PS3="${BOLD}Select Background Color (number, shortcut, or text, 'h' help): ${NORM}"
      select subopt in "${bgopts[@]}"; do
        case "$subopt,$REPLY" in
          "h",* | *,"h" | "H",* | *,"H" | "help",* | *,"help" | "Help",* | *,"Help")
            show_help
            break
            ;;
          "Custom",* | *,"Custom" | "custom",* | *,"custom")
            prompt-color-input
            color_choice=$(get-color-input)
            [ "${color_choice}" ] && try_background "${color_choice}"
            break 2
            ;;
          "Main"*,* | *,"Main"* | "main"*,* | *,"main"*)
            break 2
            ;;
          "Reset"*,* | *,"Reset"* | "reset"*,* | *,"reset"* | "r",* | *,"r")
            set-background reset
            break 2
            ;;
          "Quit"*,* | *,"Quit"* | "quit"*,* | *,"quit"* | "q",* | *,"q")
            heading "Exiting kitty-control" "Farewell"
            exit 0
            ;;
          *,*)
            try_background "${subopt}"
            break 2
            ;;
        esac
      done
    done
  fi
}

menu_foreground_color() {
  fgopts=("${colors[@]}")
  fgopts+=("help" "main menu" "quit")
  if [ "${use_fzf}" ]; then
    while true; do
      heading "Foreground Color" "Foreground"
      choice=$(printf "%s\n" "${fgopts[@]}" | fzf --prompt="ðŸ˜º Select Foreground Color ('Esc' or 'main menu' to return) ï˜½ " --height=18 --layout=reverse --exit-0)
      if [ "${choice}" ]; then
        case "${choice}" in
          "h" | "H" | "help" | "Help")
            show_help
            ;;
          "custom"*)
            prompt-color-input
            color_choice=$(get-color-input)
            [ "${color_choice}" ] && try_foreground "${color_choice}"
            break
            ;;
          "main"*)
            break
            ;;
          "reset"*)
            set-foreground reset
            break
            ;;
          "quit"*)
            heading "Exiting kitty-control" "Farewell"
            exit 0
            ;;
          *)
            try_foreground "${choice}"
            break
            ;;
        esac
      else
        break
      fi
    done
  else
    while true; do
      heading "Foreground Color" "Foreground"
      PS3="${BOLD}Select Foreground Color (number, shortcut, or text, 'h' help): ${NORM}"
      select subopt in "${fgopts[@]}"; do
        case "$subopt,$REPLY" in
          "h",* | *,"h" | "H",* | *,"H" | "help",* | *,"help" | "Help",* | *,"Help")
            show_help
            break
            ;;
          "Custom",* | *,"Custom" | "custom",* | *,"custom")
            prompt-color-input
            color_choice=$(get-color-input)
            [ "${color_choice}" ] && try_foreground "${color_choice}"
            break 2
            ;;
          "Main"*,* | *,"Main"* | "main"*,* | *,"main"*)
            break 2
            ;;
          "Reset"*,* | *,"Reset"* | "reset"*,* | *,"reset"* | "r",* | *,"r")
            set-foreground reset
            break 2
            ;;
          "Quit"*,* | *,"Quit"* | "quit"*,* | *,"quit"* | "q",* | *,"q")
            heading "Exiting kitty-control" "Farewell"
            exit 0
            ;;
          *,*)
            try_foreground "${subopt}"
            break 2
            ;;
        esac
      done
    done
  fi
}

menu_diff_file() {
  FILE=
  file1=
  file2=
  select_file
  [ "${FILE}" ] && {
    file1="${FILE}"
    select_file
    [ "${FILE}" ] && {
      file2="${FILE}"
    }
  }
  [ "${file1}" ] && [ "${file2}" ] && {
    kitty +kitten diff "${file1}" "${file2}"
  }
}

menu_diff_folder() {
  FOLD=
  fold1=
  fold2=
  select_folder
  [ "${FOLD}" ] && {
    fold1="${FOLD}"
    select_folder
    [ "${FOLD}" ] && {
      fold2="${FOLD}"
    }
  }
  [ "${fold1}" ] && [ "${fold2}" ] && {
    kitty +kitten diff "${fold1}" "${fold2}"
  }
}

menu_window_size() {
  wnopts=("${winsizes[@]}")
  wnopts+=("main menu" "quit")
  w_size=$(kitty +kitten icat --print-window-size)
  if [ "${use_fzf}" ]; then
    heading "Window Size (${w_size})" "Window Size"
    choice=$(printf "%s\n" "${wnopts[@]}" | fzf --prompt="ðŸ˜º Select Window Size Adjustment ('Esc' or 'main menu' to return) ï˜½ " --height=18 --layout=reverse --exit-0)
    [ "${choice}" ] && {
      case "${choice}" in
        "main"*)
          break
          ;;
        "quit"*)
          heading "Exiting kitty-control" "Farewell"
          exit 0
          ;;
        *)
          set-window-size "${choice}" "${choice}"
          break
          ;;
      esac
    }
  else
    while true; do
      heading "Window Size" "Window Size"
      PS3="${BOLD}Select Window Size Adjustment (number, shortcut, or text, 'h' help): ${NORM}"
      select subopt in "${wnopts[@]}"; do
        case "$subopt,$REPLY" in
          "h",* | *,"h" | "H",* | *,"H" | "help",* | *,"help" | "Help",* | *,"Help")
            show_help
            break
            ;;
          "Main"*,* | *,"Main"* | "main"*,* | *,"main"*)
            break 2
            ;;
          "Quit"*,* | *,"Quit"* | "quit"*,* | *,"quit"* | "q",* | *,"q")
            heading "Exiting kitty-control" "Farewell"
            exit 0
            ;;
          *,*)
            set-window-size "${subopt}" "${subopt}"
            break 2
            ;;
        esac
      done
    done
  fi
}

menu_font_size() {
  fnopts=("${fontsizes[@]}")
  fnopts+=("main menu" "quit")
  if [ "${use_fzf}" ]; then
    heading "Font Size" "Font Size"
    choice=$(printf "%s\n" "${fnopts[@]}" | fzf --prompt="ðŸ˜º Select Font Size Adjustment ('Esc' or 'main menu' to return) ï˜½ " --height=18 --layout=reverse --exit-0)
    [ "${choice}" ] && {
      case "${choice}" in
        "main"*)
          break
          ;;
        "default"*)
          kitty @ ${SOCKET} set-font-size ${OPTS} 0
          [ $? -eq 0 ] || {
            exit_warning "kitty @ ${SOCKET} set-font-size ${OPTS} 0"
          }
          break
          ;;
        "quit"*)
          heading "Exiting kitty-control" "Farewell"
          exit 0
          ;;
        *)
          kitty-fontsize "${choice}"
          break
          ;;
      esac
    }
  else
    while true; do
      heading "Font Size" "Font Size"
      PS3="${BOLD}Select Font Size Adjustment (number, shortcut, or text, 'h' help): ${NORM}"
      select subopt in "${fnopts[@]}"; do
        case "$subopt,$REPLY" in
          "h",* | *,"h" | "H",* | *,"H" | "help",* | *,"help" | "Help",* | *,"Help")
            show_help
            break
            ;;
          "Main"*,* | *,"Main"* | "main"*,* | *,"main"*)
            break 2
            ;;
          "Default"*,* | *,"Default"* | "default"*,* | *,"default"* | "d",* | *,"d")
            kitty @ ${SOCKET} set-font-size ${OPTS} 0
            [ $? -eq 0 ] || {
              exit_warning "kitty @ ${SOCKET} set-font-size ${OPTS} 0"
            }
            break 2
            ;;
          "Quit"*,* | *,"Quit"* | "quit"*,* | *,"quit"* | "q",* | *,"q")
            heading "Exiting kitty-control" "Farewell"
            exit 0
            ;;
          *,*)
            kitty-fontsize "${subopt}"
            break 2
            ;;
        esac
      done
    done
  fi
}

menu_load_config() {
  cfopts=("$@")
  cfopts+=("Enter kitty config to load" "Help" "Main Menu" "Quit")
  if [ "${use_fzf}" ]; then
    while true; do
      heading "Select Kitty Configuration" "Configuration"
      choice=$(printf "%s\n" "${cfopts[@]}" | fzf --prompt="ðŸ˜º Select Kitty Configuration ('Esc' or 'Main Menu' to return) ï˜½ " --height=16 --layout=reverse --exit-0)
      if [ "${choice}" ]; then
        case "${choice}" in
          "h" | "H" | "help" | "Help")
            show_help
            ;;
          "Enter"* | "enter"*)
            FILE=
            select_file
            [ "${FILE}" ] && load-config "${FILE}"
            break
            ;;
          "Main"* | "main"*)
            break
            ;;
          "Default"* | "default"* | "d")
            load-config "default"
            break
            ;;
          "Quit"* | "quit"* | "q")
            heading "Exiting kitty-control" "Farewell"
            exit 0
            ;;
          *)
            subdir=$(echo "${choice}" | awk -F '/' '{ printf $(NF - 1) }')
            subsub=$(echo "${choice}" | awk -F '/' '{ printf $(NF - 2)"/"$(NF - 1) }')
            load-config "${subdir}" "${subsub}"
            break
            ;;
        esac
      else
        break
      fi
    done
  else
    while true; do
      heading "Kitty Configuration" "Configuration"
      PS3="${BOLD}Select Kitty Configuration (number, shortcut, or text, 'h' help): ${NORM}"
      select subopt in "${cfopts[@]}"; do
        case "$subopt,$REPLY" in
          "h",* | *,"h" | "H",* | *,"H" | "help",* | *,"help" | "Help",* | *,"Help")
            show_help
            break
            ;;
          "Enter"*,* | *,"Enter"* | "enter"*,* | *,"enter"*)
            FILE=
            select_file
            [ "${FILE}" ] && load-config "${FILE}"
            break 2
            ;;
          "Main"*,* | *,"Main"* | "main"*,* | *,"main"*)
            break 2
            ;;
          "Default"*,* | *,"Default"* | "default"*,* | *,"default"* | "d",* | *,"d")
            load-config "default"
            break 2
            ;;
          "Quit"*,* | *,"Quit"* | "quit"*,* | *,"quit"* | "q",* | *,"q")
            heading "Exiting kitty-control" "Farewell"
            exit 0
            ;;
          *,*)
            subdir=$(echo "${subopt}" | awk -F '/' '{ printf $(NF - 1) }')
            subsub=$(echo "${subopt}" | awk -F '/' '{ printf $(NF - 2)"/"$(NF - 1) }')
            load-config "${subdir}" "${subsub}"
            break 2
            ;;
        esac
      done
    done
  fi
}

menu_set_layout() {
  lyopts=("Previous" "Fat" "Grid" "Horizontal" "Splits" "Stack" "Tall" "Vertical")
  lyopts+=("Help" "Main Menu" "Quit")
  if [ "${use_fzf}" ]; then
    while true; do
      heading "Select Window Layout" "Window Layout"
      choice=$(printf "%s\n" "${lyopts[@]}" | fzf --prompt="ðŸ˜º Select Window Layout ('Esc' or 'main menu' to return) ï˜½ " --height=18 --layout=reverse --exit-0)
      if [ "${choice}" ]; then
        case "${choice}" in
          "Help"*)
            show_layout_help
            ;;
          "Main"*)
            break
            ;;
          "Quit"*)
            heading "Exiting kitty-control" "Farewell"
            exit 0
            ;;
          "Previous" | "Fat" | "Grid" | "Horizontal" | "Splits" | "Stack" | "Tall" | "Vertical")
            set-layout "${choice}"
            break
            ;;
          *)
            printf "\nUnrecognized selection. Try again.\n"
            ;;
        esac
      else
        break
      fi
    done
  else
    while true; do
      heading "Select Window Layout" "Window Layout"
      PS3="${BOLD}Select Window Layout (number, shortcut, or text, 'h' help): ${NORM}"
      select subopt in "${lyopts[@]}"; do
        case "$subopt,$REPLY" in
          "h",* | *,"h" | "H",* | *,"H" | "help",* | *,"help" | "Help",* | *,"Help")
            show_layout_help
            break
            ;;
          "Previous",* | *,"Previous" | "Fat",* | *,"Fat" | "Grid",* | *,"Grid" | "Horizontal",* | *,"Horizontal" | "Splits",* | *,"Splits" | "Stack",* | *,"Stack" | "Tall",* | *,"Tall" | "Vertical",* | *,"Vertical")
            set-layout "${subopt}"
            break 2
            ;;
          "Main"*,* | *,"Main"* | "main"*,* | *,"main"*)
            break 2
            ;;
          "Quit"*,* | *,"Quit"* | "quit"*,* | *,"quit"* | "q",* | *,"q")
            heading "Exiting kitty-control" "Farewell"
            exit 0
            ;;
          *,*)
            printf "\nCould not match '${REPLY}' with a menu entry."
            printf "\nPlease try again with an exact match.\n"
            break
            ;;
        esac
        REPLY=
      done
    done
  fi
}

menu_set_trans() {
  tropts=("${translevels[@]}")
  tropts+=("main menu" "quit")
  if [ "${use_fzf}" ]; then
    while true; do
      heading "Transparency Opacity" "Transparency"
      choice=$(printf "%s\n" "${tropts[@]}" | fzf --prompt="ðŸ˜º Select Transparency Opacity ('Esc' or 'main menu' to return) ï˜½ " --height=18 --layout=reverse --exit-0)
      if [ "${choice}" ]; then
        case "${choice}" in
          "default"*)
            set-opacity "${OPACITY}"
            break
            ;;
          "main"*)
            break
            ;;
          "quit"*)
            heading "Exiting kitty-control" "Farewell"
            exit 0
            ;;
          *)
            set-opacity "${choice}"
            break
            ;;
        esac
      else
        break
      fi
    done
  else
    while true; do
      heading "Transparency Opacity" "Transparency"
      PS3="${BOLD}Select Transparency Opacity (number, shortcut, or text, 'h' help): ${NORM}"
      select subopt in "${tropts[@]}"; do
        case "$subopt,$REPLY" in
          "h",* | *,"h" | "H",* | *,"H" | "help",* | *,"help" | "Help",* | *,"Help")
            show_help
            break
            ;;
          "default"*,* | *,"default"*)
            set-opacity "${OPACITY}"
            break 2
            ;;
          [0-9].[0-9]*,* | *,[0-9].[0-9]*)
            set-opacity "${subopt}"
            break 2
            ;;
          "Main"*,* | *,"Main"* | "main"*,* | *,"main"*)
            break 2
            ;;
          "Quit"*,* | *,"Quit"* | "quit"*,* | *,"quit"* | "q",* | *,"q")
            heading "Exiting kitty-control" "Farewell"
            exit 0
            ;;
          *,*)
            printf "\nCould not match '${REPLY}' with a menu entry."
            printf "\nPlease try again with an exact match.\n"
            break
            ;;
        esac
        REPLY=
      done
    done
  fi
}

options_menu() {
  while true; do
    clear_screen
    if [ "${have_rich}" ]; then
      rich "[cyan]Kitty Control Options Menu[/cyan]" -p -a rounded -c -C
    else
      if [ "${use_figlet}" ]; then
        show_figlet "Options Menu"
      else
        printf "\n\nKitty Control Options Menu\n\n"
      fi
    fi
    printf "\n"
    kc_options=()
    if [ "${allopt}" ]; then
      kc_options+=("All Tabs/Windows  [yes]")
    else
      kc_options+=("All Tabs/Windows  [no]")
    fi
    kc_options+=("Tab Match Spec    [${tabopts}]")
    kc_options+=("Window Match Spec [${winopts}]")
    if [ "${debug}" ]; then
      kc_options+=("Debug Mode        [yes]")
    else
      kc_options+=("Debug Mode        [no]")
    fi
    [ "${have_figlet}" ] && {
      if [ "${use_figlet}" ]; then
        kc_options+=("Use Figlet        [yes]")
      else
        kc_options+=("Use Figlet        [no]")
      fi
    }
    [ "${have_fzf}" ] && {
      if [ "${use_fzf}" ]; then
        kc_options+=("Use Fzf           [yes]")
      else
        kc_options+=("Use Fzf           [no]")
      fi
    }
    [ "${have_ranger}" ] && {
      if [ "${use_ranger}" ]; then
        kc_options+=("Use Ranger        [yes]")
      else
        kc_options+=("Use Ranger        [no]")
      fi
    }
    kc_options+=("Help" "Main Menu" "Quit (q)")
    if [ "${use_fzf}" ]; then
      choice=$(printf "%s\n" "${kc_options[@]}" | fzf --prompt="ðŸ˜º Set/Toggle Options ('Esc' or 'Main Menu' to return) ï˜½ " --height=18 --layout=reverse --exit-0)
      if [ "${choice}" ]; then
        case "${choice}" in
          "h" | "H" | "help" | "Help")
            show_help
            ;;
          "All"* | "all"*)
            if [ "${allopts}" ]; then
              OPTS=$(echo "${OPTS}" | sed -e "s/ -a//")
              allopts=
            else
              OPTS="${OPTS} -a"
              allopts=1
            fi
            ;;
          "Debug"* | "debug"*)
            if [ "${debug}" ]; then
              debug=
            else
              debug=1
            fi
            ;;
          "Tab"* | "tab"*)
            if [ "${tabopts}" ]; then
              OPTS=$(echo "${OPTS}" | sed -e "s/ -t ${tabopts}//")
              prompt-match-input
              tabopts=$(get_tabopts "${tabopts}")
              [ "${tabopts}" ] && OPTS="${OPTS} -t ${tabopts}"
            else
              prompt-match-input
              tabopts=$(get_tabopts)
              [ "${tabopts}" ] && OPTS="${OPTS} -t ${tabopts}"
            fi
            ;;
          "Window"* | "window"*)
            if [ "${winopts}" ]; then
              OPTS=$(echo "${OPTS}" | sed -e "s/ -m ${winopts}//")
              prompt-match-input
              winopts=$(get_winopts "${winopts}")
              [ "${winopts}" ] && OPTS="${OPTS} -m ${winopts}"
            else
              prompt-match-input
              winopts=$(get_winopts)
              [ "${winopts}" ] && OPTS="${OPTS} -m ${winopts}"
            fi
            ;;
          "Use Figlet"* | "use figlet"*)
            if [ "${use_figlet}" ]; then
              use_figlet=
            else
              use_figlet=1
            fi
            ;;
          "Use Fzf"* | "use fzf"*)
            if [ "${use_fzf}" ]; then
              use_fzf=
            else
              use_fzf=1
            fi
            ;;
          "Use Ranger"* | "use ranger"*)
            if [ "${use_ranger}" ]; then
              use_ranger=
            else
              use_ranger=1
            fi
            ;;
          Main*)
            break
            ;;
          Quit*)
            heading "Exiting kitty-control" "Farewell"
            exit 0
            ;;
          *)
            printf "\nCould not match '${choice}' with an entry."
            printf "\nPlease try again with an exact match.\n"
            ;;
        esac
      else
        break
      fi
    else
      PS3="${BOLD}Enter a choice (number, shortcut, or text, 'h' help): ${NORM}"
      select opt in "${kc_options[@]}"; do
        case "$opt,$REPLY" in
          "h",* | *,"h" | "H",* | *,"H" | "help",* | *,"help" | "Help",* | *,"Help")
            show_help
            break
            ;;
          "All"*,* | *,"All"* | "all"*,* | *,"all"*)
            if [ "${allopts}" ]; then
              OPTS=$(echo "${OPTS}" | sed -e "s/ -a//")
              allopts=
            else
              OPTS="${OPTS} -a"
              allopts=1
            fi
            break
            ;;
          "Debug"*,* | *,"Debug"* | "debug"*,* | *,"debug"*)
            if [ "${debug}" ]; then
              debug=
            else
              debug=1
            fi
            break
            ;;
          "Tab"*,* | *,"Tab"* | "tab"*,* | *,"tab"*)
            if [ "${tabopts}" ]; then
              OPTS=$(echo "${OPTS}" | sed -e "s/ -t ${tabopts}//")
              prompt-match-input
              tabopts=$(get_tabopts "${tabopts}")
              [ "${tabopts}" ] && OPTS="${OPTS} -t ${tabopts}"
            else
              prompt-match-input
              tabopts=$(get_tabopts)
              [ "${tabopts}" ] && OPTS="${OPTS} -t ${tabopts}"
            fi
            break
            ;;
          "Win"*,* | *,"Win"* | "win"*,* | *,"win"*)
            if [ "${winopts}" ]; then
              OPTS=$(echo "${OPTS}" | sed -e "s/ -m ${winopts}//")
              prompt-match-input
              winopts=$(get_winopts "${winopts}")
              [ "${winopts}" ] && OPTS="${OPTS} -m ${winopts}"
            else
              prompt-match-input
              winopts=$(get_winopts)
              [ "${winopts}" ] && OPTS="${OPTS} -m ${winopts}"
            fi
            break
            ;;
          "Use Figlet"*,* | *,"Use Figlet"* | "use figlet"*,* | *,"use figlet"*)
            if [ "${use_figlet}" ]; then
              use_figlet=
            else
              use_figlet=1
            fi
            break
            ;;
          "Use Fzf"*,* | *,"Use Fzf"* | "use fzf"*,* | *,"use fzf"*)
            if [ "${use_fzf}" ]; then
              use_fzf=
            else
              use_fzf=1
            fi
            break
            ;;
          "Use Ranger"*,* | *,"Use Ranger"* | "use ranger"*,* | *,"use ranger"*)
            if [ "${use_ranger}" ]; then
              use_ranger=
            else
              use_ranger=1
            fi
            break
            ;;
          "Main"*,* | *,"Main"* | "main"*,* | *,"main"*)
            break 2
            ;;
          "Quit"*,* | *,"Quit"* | "quit"*,* | *,"quit"* | "q",* | *,"q")
            heading "Exiting kitty-control" "Farewell"
            exit 0
            ;;
          *,*)
            printf "\nCould not match '${REPLY}' with a menu entry."
            printf "\nPlease try again with an exact match.\n"
            break
            ;;
        esac
        REPLY=
      done
    fi
  done
}

select_with_fzf() {
  fzopts=("$@")
  delete=("Fuzzy Select (z)")
  tmp_array=()
  for i in "${!fzopts[@]}"; do
    keepit=1
    for target in "${delete[@]}"; do
      if [[ ${fzopts[i]} = $target ]]; then
        unset 'fzopts[i]'
        keepit=
      fi
    done
    [ "${keepit}" ] && {
      entry=$(echo "${fzopts[i]}" | sed -e "s/ \[.\]//")
      tmp_array+=("${entry}")
    }
  done
  fzopts=("${tmp_array[@]}")
  unset tmp_array

  fzopts+=("Help" "Main Menu")
  while true; do
    heading "Kitty Control Fuzzy Select" "Kitty Control"
    choice=$(printf "%s\n" "${fzopts[@]}" | fzf -m --prompt="ðŸ˜º Select Menu Option ('Main Menu' or 'Esc' to return) ï˜½ " --height=18 --layout=reverse --exit-0)
    if [ "${choice}" ]; then
      case "${choice}" in
        "h" | "H" | "help"* | "Help"*)
          show_help
          ;;
        "Main"* | "main"*)
          break
          ;;
        "Reset"* | "reset"*)
          set-background reset
          set-foreground reset
          load-config "default"
          ;;
        "Background Color"* | "back")
          menu_background_color
          ;;
        "Foreground Color"* | "fore")
          menu_foreground_color
          ;;
        "Background Image"*)
          FILE=
          select_file image
          [ "${FILE}" ] && {
            set-bg-image none
            set-bg-image "${FILE}"
          }
          ;;
        "Clear"* | "clear"* | "c")
          set-bg-image none
          ;;
        "Dark"* | "dark"*)
          set-opacity "1.0"
          ;;
        "Diff File"* | "diff file"*)
          menu_diff_file
          ;;
        "Diff Fold"* | "diff fold"*)
          menu_diff_folder
          ;;
        "Exam"* | "exam"*)
          show_examples noexit | less
          ;;
        "Font"* | "font"* | "f")
          menu_font_size
          ;;
        "Install Figlet"*)
          install_figlet
          ;;
        "Install Fzf"*)
          install_fzf
          ;;
        "Install jq"*)
          install_package jq
          have_jq=$(type -p jq)
          ;;
        "Install Lolcat"*)
          install_lolcat
          ;;
        "Install Fastfetch"*)
          install_fastfetch
          ;;
        "Install Neofetch"*)
          install_neofetch
          ;;
        "Install Ranger"*)
          install_ranger
          ;;
        "List Col"* | "list col"* | "C")
          list_colors brief more
          prompt_more
          ;;
        "List Tab"* | "list tab"* | "K")
          tabs_menu
          ;;
        "List Win"* | "list win"* | "L")
          windows_menu
          ;;
        "Load"* | "load"* | "l")
          numconfs=1
          configs=("default")
          for kconf in ${CONFDIR}/*/kitty.conf ${CONFDIR}/*/*/kitty.conf; do
            [ "${kconf}" == "${CONFDIR}/*/kitty.conf" ] && continue
            [ "${kconf}" == "${CONFDIR}/*/*/kitty.conf" ] && continue
            ((numconfs++))
            configs+=("${kconf}")
          done
          menu_load_config "${configs[@]}"
          ;;
        "System"* | "system"* | "n")
          show_fetch
          ;;
        "View"* | "view"* | "v")
          FILE=
          select_file image
          [ "${FILE}" ] && {
            kitty +kitten icat ${FILE}
            printf "\nTo view this image use: kitty +kitten icat ${FILE}\n"
            prompt_continue
          }
          ;;
        *"Theme"* | *"theme"* | "T")
          kitty +kitten themes
          ;;
        "Term"* | "term"* | "info" | "i")
          show_term_info
          prompt_continue
          ;;
        "Tran"* | "tran"* | "t")
          menu_set_trans
          ;;
        "Full"* | "full"* | "F")
          toggle-fullscreen
          sleep 1
          ;;
        "Unicode"* | "unicode"*)
          kitty +kitten unicode_input
          ;;
        "Show"* | "show"* | "Usage"* | "usage"*)
          show_usage usage
          ;;
        "Man"* | "man"* | "m")
          printf "\n"
          man kitty-control
          ;;
        "Open"* | "open"* | "O")
          open_doc_menu
          ;;
        "Opt"* | "opt"* | "o")
          options_menu
          ;;
        *"Layout"* | *"layout"* | "L")
          menu_set_layout
          ;;
        "Window"* | "window"* | "W")
          menu_window_size
          ;;
        "Upgrade kitty-control"* | "upgrade kitty-control"*)
          upgrade_kitty_control noexit
          ;;
        "Upgrade Kitty"* | "upgrade kitty"*)
          install_kitty
          ;;
        "Upgrade Fzf"* | "upgrade fzf"*)
          upgrade_fzf
          ;;
        "About"* | "about"* | "A" | "a")
          show_about
          prompt_continue
          ;;
        "Quit"* | "quit"* | "Q" | "q")
          heading "Exiting kitty-control" "Farewell"
          exit 0
          ;;
        *)
          printf "\nCould not match '${choice}' with a menu entry."
          printf "\nPlease try again with an exact match.\n"
          ;;
      esac
    else
      break
    fi
  done
}

show_menu() {
  warning_issued=0
  set_haves
  while true; do
    clear_screen
    if [ "${use_figlet}" ]; then
      show_figlet
    else
      [ "${have_rich}" ] && rich "[cyan]Kitty Control Main Menu[/cyan]" -p -a rounded -c -C
    fi
    printf "\n"
    options=()
    PS3="${BOLD}Enter a choice (number, shortcut, or text, 'h' help): ${NORM}"
    numconfs=1
    configs=("default")
    for kconf in ${CONFDIR}/*/kitty.conf ${CONFDIR}/*/*/kitty.conf; do
      [ "${kconf}" == "${CONFDIR}/*/kitty.conf" ] && continue
      [ "${kconf}" == "${CONFDIR}/*/*/kitty.conf" ] && continue
      ((numconfs++))
      configs+=("${kconf}")
    done
    options+=("Background Color [b]" "Background Image [i]" "Clear Background [c]")
    options+=("Dark/Opaque      [B]" "Diff Files       [d]" "Diff Folders     [D]")
    options+=("Examples         [e]" "Font Size        [f]")
    options+=("Foreground Color [g]" "Fullscreen       [F]" "Kitty Theme      [T]")
    options+=("List Colors      [C]" "List Tabs        [k]" "List Windows     [w]")
    [ ${numconfs} -gt 1 ] && {
      options+=("Load Config      [l]")
    }
    options+=("Manual Page      [m]")
    [ "${USE_LOAD_CONFIG}" ] && {
      options+=("Open Kitty Doc   [O]")
    }
    options+=("Options          [o]" "Reset            [r]")
    [ "${have_fetch}" ] && options+=("System Info      [n]")
    options+=("Terminal Info    [I]")
    options+=("Transparent      [t]" "Unicode Input    [U]" "Usage            [u]")
    options+=("View an Image    [v]" "Window Layout    [L]" "Window Size      [W]")
    [ "${have_figlet}" ] || options+=("Install Figlet")
    [ "${have_fzf}" ] || options+=("Install Fzf")
    [ "${have_jq}" ] || options+=("Install jq")
    [ "${have_lolcat}" ] || options+=("Install Lolcat")
    [ "${have_fetch}" ] || {
      options+=("Install Fastfetch")
      options+=("Install Neofetch")
    }
    [ "${have_ranger}" ] || options+=("Install Ranger")
    [ "${have_fastfetch}" ] && {
      fch_release_version=$(get_fastfetch_release)
      fch_install_version=$(fastfetch --version | awk '{ print $2 }')
      update_fastfetch=$(check_three_version "${fch_release_version}" "${fch_install_version}")
      [ "${update_fastfetch}" ] && {
        options+=("Upgrade Fastfetch (${fch_install_version} -> ${fch_release_version})")
      }
    }
    [ "${have_fzf}" ] && {
      fzf_release_version=$(curl -fsSL "${fzf_url}" | grep ^version= | awk -F '=' '{ print $2 }')
      fzf_install_version=$(fzf --version | awk '{ print $1 }')
      update_fzf=$(check_three_version "${fzf_release_version}" "${fzf_install_version}")
      [ "${update_fzf}" ] && {
        options+=("Upgrade Fzf (${fzf_install_version} -> ${fzf_release_version})")
      }
    }
    release_version=$(curl -fsSL "${kitty_version_url}")
    install_version=$(kitty --version | awk '{ print $2 }')
    update_kitty=$(check_three_version "${release_version}" "${install_version}")
    [ "${update_kitty}" ] && {
      options+=("Upgrade Kitty (${install_version} -> ${release_version})")
    }
    control_version=$(get_control_version)
    install_version=$(get_install_version)
    update_control=$(check_control_version "${control_version}" "${install_version}")
    [ "${update_control}" ] && {
      options+=("Upgrade kitty-control (${install_version} -> ${control_version})")
    }
    options+=("Fuzzy Select     [z]" "About            [a]" "Quit             [q]")
    set_show_shortcuts
    select opt in "${options[@]}"; do
      case "$opt,$REPLY" in
        "h",* | *,"h" | "H",* | *,"H" | "help",* | *,"help" | "Help",* | *,"Help")
          show_help
          break
          ;;
        "Background Color"*,* | *,"Background Color"* | "b",* | *,"b" | "bg",* | *,"bg" | "back",* | *,"back")
          menu_background_color
          break
          ;;
        "Foreground Color"*,* | *,"Foreground Color"* | "g",* | *,"g" | "fg",* | *,"fg" | "fore",* | *,"fore")
          menu_foreground_color
          break
          ;;
        "Background Image"*,* | *,"Background Image"* | "i",* | *,"i" | "bi",* | *,"bi")
          FILE=
          select_file image
          [ "${FILE}" ] && {
            set-bg-image none
            set-bg-image "${FILE}"
          }
          break
          ;;
        "Clear"*,* | *,"Clear"* | "clear"*,* | *,"clear"* | "c",* | *,"c")
          set-bg-image none
          break
          ;;
        "Dark"*,* | *,"Dark"* | "dark"*,* | *,"dark"* | "B",* | *,"B")
          set-opacity "1.0"
          break
          ;;
        "Diff File"*,* | *,"Diff File"* | "diff file"*,* | *,"diff file"* | "d",* | *,"d")
          menu_diff_file
          break
          ;;
        "Diff Fold"*,* | *,"Diff Fold"* | "diff fold"*,* | *,"diff fold"* | "D",* | *,"D")
          menu_diff_folder
          break
          ;;
        "Exam"*,* | *,"Exam"* | "exam"*,* | *,"exam"* | "e",* | *,"e")
          show_examples noexit | less
          break
          ;;
        "Font"*,* | *,"Font"* | "font"*,* | *,"font"* | "f",* | *,"f")
          menu_font_size
          break
          ;;
        *"Layout"*,* | *,*"Layout"* | *"layout"*,* | *,*"layout"* | "L",* | *,"L")
          menu_set_layout
          break
          ;;
        "Window"*,* | *,"Window"* | "window"*,* | *,"window"* | "W",* | *,"W")
          menu_window_size
          break
          ;;
        "z",* | *,"z" | "Fzf",* | *,"Fzf" | "fzf",* | *,"fzf" | "Fuzzy"*,* | *,"Fuzzy"* | "fuzzy"*,* | *,"fuzzy"*)
          [ "${have_fzf}" ] && select_with_fzf "${options[@]}"
          break
          ;;
        "Install Figlet",* | *,"Install Figlet")
          install_figlet
          break
          ;;
        "Install Fzf",* | *,"Install Fzf")
          install_fzf
          break
          ;;
        "Install jq",* | *,"Install jq")
          install_package jq
          have_jq=$(type -p jq)
          break
          ;;
        "Install Lolcat",* | *,"Install Lolcat")
          install_lolcat
          break
          ;;
        "Install Fastfetch",* | *,"Install Fastfetch")
          install_fastfetch
          break
          ;;
        "Install Neofetch",* | *,"Install Neofetch")
          install_neofetch
          break
          ;;
        "Install Ranger",* | *,"Install Ranger")
          install_ranger
          break
          ;;
        "List Col"*,* | *,"List Col"* | "list col"*,* | *,"list col"* | "C",* | *,"C")
          list_colors brief more
          prompt_more
          break
          ;;
        "List Tab"*,* | *,"List Tab"* | "list tab"*,* | *,"list tab"* | "k",* | *,"k")
          tabs_menu
          break
          ;;
        "List Win"*,* | *,"List Win"* | "list win"*,* | *,"list win"* | "w",* | *,"w")
          windows_menu
          break
          ;;
        "Load"*,* | *,"Load"* | "load"*,* | *,"load"* | "l",* | *,"l")
          menu_load_config "${configs[@]}"
          break
          ;;
        "View"*,* | *,"View"* | "view"*,* | *,"view"* | "v",* | *,"v")
          FILE=
          select_file image
          [ "${FILE}" ] && {
            kitty +kitten icat ${FILE}
            printf "\nTo view this image use: kitty +kitten icat ${FILE}\n"
            prompt_continue
          }
          break
          ;;
        *"Theme"*,* | *,*"Theme"* | *"theme"*,* | *,*"theme"* | "T",* | *,"T")
          kitty +kitten themes
          break
          ;;
        "Term"*,* | *,"Term"* | "term"*,* | *,"term"* | "info",* | *,"info" | "I",* | *,"I")
          show_term_info
          prompt_continue
          break
          ;;
        "Tran"*,* | *,"Tran"* | "tran"*,* | *,"tran"* | "t",* | *,"t")
          menu_set_trans
          break
          ;;
        *"Full"*,* | *,*"Full"* | *"full"*,* | *,*"full"* | "F",* | *,"F")
          toggle-fullscreen
          sleep 1
          break
          ;;
        "Unicode"*,* | *,"Unicode"* | "unicode"*,* | *,"unicode"* | "U",* | *,"U")
          kitty +kitten unicode_input
          break
          ;;
        "System"*,* | *,"System"* | "system"*,* | *,"system"* | "n",* | *,"n")
          show_fetch
          break
          ;;
        "Reset"*,* | *,"Reset"* | "reset"*,* | *,"reset"* | "r",* | *,"r")
          set-background reset
          set-foreground reset
          load-config "default"
          break
          ;;
        "Show"*,* | *,"Show"* | "show"*,* | *,"show"* | "Usage"*,* | *,"Usage"* | "usage"*,* | *,"usage"* | "u",* | *,"u")
          show_usage usage
          break
          ;;
        "Man"*,* | *,"Man"* | "man"*,* | *,"man"* | "m",* | *,"m")
          printf "\n"
          man kitty-control
          break
          ;;
        "Open"*,* | *,"Open"* | "open"*,* | *,"open"* | "O",* | *,"O")
          open_doc_menu
          break
          ;;
        "Opt"*,* | *,"Opt"* | "opt"*,* | *,"opt"* | "o",* | *,"o")
          options_menu
          break
          ;;
        "Upgrade kitty-control"*,* | *,"Upgrade kitty-control"* | "upgrade kitty-control"*,* | *,"upgrade kitty-control"*)
          upgrade_kitty_control noexit
          break
          ;;
        "Upgrade Kitty"*,* | *,"Upgrade Kitty"* | "upgrade kitty"*,* | *,"upgrade kitty"*)
          install_kitty
          break
          ;;
        "Upgrade Fastfetch"*,* | *,"Upgrade Fastfetch"* | "upgrade fastfetch"*,* | *,"upgrade fastfetch"*)
          install_fastfetch
          break
          ;;
        "Upgrade Fzf"*,* | *,"Upgrade Fzf"* | "upgrade fzf"*,* | *,"upgrade fzf"*)
          upgrade_fzf
          break
          ;;
        "About"*,* | *,"About"* | "about"*,* | *,"about"* | "a",* | *,"a")
          show_about
          prompt_continue
          break
          ;;
        "Quit"*,* | *,"Quit"* | "quit"*,* | *,"quit"* | "q",* | *,"q")
          heading "Exiting kitty-control" "Farewell"
          exit 0
          ;;
        *,*)
          printf "\nCould not match '${REPLY}' with a menu entry."
          printf "\nPlease try again with an exact match.\n"
          break
          ;;
      esac
      REPLY=
    done
  done
}

## Main execution starts here
#
trap 'exit_control' SIGINT SIGTERM SIGHUP
uid=$(id -u)
gid=$(id -g)
SUDO="sudo -E"
if [ "${EUID}" ]; then
  [ ${EUID} -eq 0 ] && SUDO=
else
  [ ${uid} -eq 0 ] && SUDO=
fi

arm=
darwin=
mach=$(uname -m)
platform=$(uname -s)
[ "${platform}" == "Darwin" ] && darwin=1
[ "${mach}" == "arm64" ] && arm=1

[ -d ${HOME}/.local/bin ] && pathadd "${HOME}/.local/bin"
[ -d ${HOME}/.fzf/bin ] && pathadd "${HOME}/.fzf/bin"

# Use a Github API token if one is set
[ "${GITHUB_TOKEN}" ] || {
  [ "${GH_API_TOKEN}" ] && export GITHUB_TOKEN="${GH_API_TOKEN}"
  [ "${GITHUB_TOKEN}" ] || {
    [ "${GH_TOKEN}" ] && export GITHUB_TOKEN="${GH_TOKEN}"
  }
}
if [ "${GITHUB_TOKEN}" ]; then
  AUTH_HEADER="-H \"Authorization: Bearer ${GITHUB_TOKEN}\""
else
  AUTH_HEADER=
fi

set_haves
[ "${have_kitty}" ] || {
  install_kitty
  have_kitty=$(type -p kitty)
  [ "${have_kitty}" ] || {
    printf "\n\nERROR: kitty not found"
    printf "\nInstall kitty and re-run kitty-control. Exiting.\n"
    exit 1
  }
}
[ "${have_fzf}" ] || install_fzf

# Check for new load-config Kitty command introduced in 0.32.2
kitty_install_version=$(kitty --version | awk '{ print $2 }')
USE_LOAD_CONFIG=$(check_three_version "${kitty_install_version}" "0.32.1")
if [ "${USE_LOAD_CONFIG}" ]; then
  USE_LOAD_CONFIG=1
fi

# Menu tools
use_figlet=1
use_fzf=1
use_ranger=1
[ "${have_figlet}" ] || use_figlet=
[ "${have_fzf}" ] || use_fzf=
[ "${have_ranger}" ] || use_ranger=
[ "$1" ] || show_menu

# Some actions need to be delayed until after any configuration load
allopt=
bg_image=
backgrnd=
debug=
foregrnd=
fontplus=
fontdown=
fontsize=
fullscrn=
install_version=
release_version=
kittycmd=
setopcty=
set_menu=
fetch=
tabopts=
width=
height=
winopts=
warning_issued=1
while [[ $1 ]]; do
  case "$1" in
    -a | --all)
      OPTS="${OPTS} -a"
      allopt=1
      shift
      ;;
    -c | --command)
      kittycmd="$2"
      shift 2
      ;;
    -i | --image)
      bg_image="$2"
      shift 2
      ;;
    -f | --fullscreen)
      fullscrn=1
      shift
      ;;
    -m | --match)
      if [ "$2" == "--help" ]; then
        printf "\nSee https://sw.kovidgoyal.net/kitty/remote-control/#matching-windows-and-tabs\n\n"
        exit 0
      else
        winopts="$2"
        OPTS="${OPTS} -m ${winopts}"
      fi
      shift 2
      ;;
    -o | --open)
      if [ "$2" ]; then
        docpage=$(tolower "$2")
        case "${docpage}" in
          conf | faq)
            open_kitty_doc "${docpage}"
            ;;
          remote)
            open_kitty_doc remote-control
            ;;
          layout*)
            open_kitty_doc layouts
            ;;
          diff | icat | ssh | theme*)
            open_kitty_doc "kittens/${docpage}"
            ;;
          unicode*)
            open_kitty_doc kittens/unicode_input
            ;;
          man*)
            man kitty
            ;;
          *)
            printf "\nERROR: unsupported Kitty documantation entry: $2"
            printf "\nSupported documentation entries:"
            printf "\n  conf faq remote diff icat layout ssh themes unicode man\n\n"
            brief_usage
            ;;
        esac
        shift 2
      else
        printf "\nERROR: -o/--open requires a documentation entry as argument\n\n"
        brief_usage
      fi
      ;;
    -s | --socket)
      if [ "$2" == "--help" ]; then
        printf "\nStart kitty as:"
        printf "\n\tkitty -o allow_remote_control=yes --listen-on unix:/tmp/mykitty"
        printf "\nThe kitty '--listen-on' option tells kitty to listen for control messages"
        printf "\nat the specified UNIX-domain socket. See kitty --help for details.\n"
        printf "\nNow you can control this instance of kitty using the"
        printf "\n\tkitten @ --to command line argument to kitten @. For example:"
        printf "\n\tkitten @ --to unix:/tmp/mykitty ls"
        printf "\nRemote control via a socket can be enabled in kitty.conf by setting:"
        printf "\n\tallow_remote_control yes"
        printf "\n\tlisten_on unix:/tmp/mykitty\n"
        printf "\nTo use this with kitty-control invoke with '-s /tmp/mykitty'."
        printf "\nFor example: kitty-control -s /tmp/mykitty fontsize 24"
        printf "\nThis would send the font size command to the Kitty instance"
        printf "\nlistening on the unix domain socket at /tmp/mykitty\n\n"
        exit 0
      else
        [ -S "$2" ] && SOCKET="--to unix:$2"
      fi
      shift 2
      ;;
    -t | --tab)
      if [ "$2" == "--help" ]; then
        printf "\nSee https://sw.kovidgoyal.net/kitty/remote-control/#matching-windows-and-tabs\n\n"
        exit 0
      else
        tabopts="$2"
        OPTS="${OPTS} -t ${tabopts}"
      fi
      shift 2
      ;;
    -d | --debug)
      debug=1
      set_menu=1
      shift
      ;;
    -e | --examples)
      show_examples
      shift
      ;;
    -E | --Examples)
      BOLD=
      NORM=
      show_examples
      shift
      ;;
    -h | --help)
      usage
      shift
      ;;
    -H | --Help)
      BOLD=
      NORM=
      usage
      shift
      ;;
    -u | --usage)
      brief_usage
      shift
      ;;
    -v | --version)
      show_versions
      exit 0
      ;;
    back* | --back*)
      if [ "$2" ]; then
        backgrnd="$2"
        shift 2
      else
        printf "\nERROR: background keyword requires an argument\n\n"
        brief_usage
      fi
      ;;
    fore* | --fore*)
      if [ "$2" ]; then
        foregrnd="$2"
        shift 2
      else
        printf "\nERROR: foreground keyword requires an argument\n\n"
        brief_usage
      fi
      ;;
    diff | --diff)
      if [ "$2" ] && [ "$3" ]; then
        kitty +kitten diff $2 $3
        shift 3
      else
        printf "\nERROR: diff keyword requires two file or directory arguments\n\n"
        brief_usage
      fi
      ;;
    icat | --icat)
      if [ "$2" ]; then
        kitty +kitten icat $2
        shift 2
      else
        printf "\nERROR: icat keyword requires an image as argument\n\n"
        brief_usage
      fi
      ;;
    layout | --layout)
      if [ "$2" ]; then
        layout=$(tolower "$2")
        case "${layout}" in
          previous | fat | grid | horizontal | splits | stack | tall | vertical)
            set-layout "$2"
            ;;
          *)
            printf "\nERROR: unsupported layout name: $2"
            printf "\nSupported layout names:"
            printf "\n  previous fat grid horizontal splits stack tall vertical\n\n"
            brief_usage
            ;;
        esac
        shift 2
      else
        printf "\nERROR: layout keyword requires a layout name as argument\n\n"
        brief_usage
      fi
      ;;
    list | --list)
      [ "$2" == "self" ] && {
        OPTS="--self ${OPTS}"
        shift
      }
      case "$2" in
        colors)
          list_colors
          shift 2
          ;;
        tab*)
          if [ "${have_jq}" ]; then
            kitty @ ${SOCKET} ls ${OPTS} | jq --color-output '.[]?.tabs'
          else
            kitty @ ${SOCKET} ls ${OPTS}
            [ $? -eq 0 ] || {
              exit_warning "kitty @ ${SOCKET} ls ${OPTS}"
            }
          fi
          shift 2
          ;;
        window* | "")
          if [ "${have_jq}" ]; then
            kitty @ ${SOCKET} ls ${OPTS} | jq --color-output '.[]'
          else
            kitty @ ${SOCKET} ls ${OPTS}
            [ $? -eq 0 ] || {
              exit_warning "kitty @ ${SOCKET} ls ${OPTS}"
            }
          fi
          if [ "$2" ]; then
            shift 2
          else
            shift
          fi
          ;;
        *)
          shift
          ;;
      esac
      ;;
    ls | --ls)
      [ "$2" == "self" ] && {
        OPTS="--self ${OPTS}"
        shift
      }
      case "$2" in
        colors)
          list_colors brief
          shift 2
          ;;
        tab*)
          if [ "${have_jq}" ]; then
            list_tabs
          else
            kitty @ ${SOCKET} ls ${OPTS}
            [ $? -eq 0 ] || {
              exit_warning "kitty @ ${SOCKET} ls ${OPTS}"
            }
          fi
          shift 2
          ;;
        window* | "")
          if [ "${have_jq}" ]; then
            list_windows
          else
            kitty @ ${SOCKET} ls ${OPTS}
            [ $? -eq 0 ] || {
              exit_warning "kitty @ ${SOCKET} ls ${OPTS}"
            }
          fi
          if [ "$2" ]; then
            shift 2
          else
            shift
          fi
          ;;
        *)
          shift
          ;;
      esac
      ;;
    load | reload | --load | --reload)
      if [ "$2" ]; then
        load-config "$2"
        shift 2
      else
        load-config "${CONFDIR}/kitty.conf"
        shift
      fi
      ;;
    dark | opaque | --dark | --opaque)
      setopcty="1.0"
      shift
      ;;
    fontmin* | fontdec* | --fontmin* | --fontdec*)
      if [ "$2" ]; then
        fontdown="$2"
        shift 2
      else
        fontdown=1
        shift
      fi
      ;;
    fontplus | fontinc* | --fontplus | --fontinc*)
      if [ "$2" ]; then
        fontplus="$2"
        shift 2
      else
        fontplus=1
        shift
      fi
      ;;
    font* | --font*)
      if [ "$2" ]; then
        fontsize="$2"
        shift 2
      else
        fontsize="0"
        shift
      fi
      ;;
    man | --man)
      man kitty-control
      shift
      ;;
    menu | --menu)
      set_menu=1
      shift
      ;;
    *fetch* | --*fetch*)
      fetch=1
      shift
      ;;
    size* | --size*)
      if [ "$3" ]; then
        width="$2"
        height="$3"
        shift 3
      else
        width="$2"
        height="$2"
        shift 2
      fi
      ;;
    title | --title)
      if [ "$2" ]; then
        kitty @ ${SOCKET} set-tab-title ${OPTS} "$2"
        [ $? -eq 0 ] || {
          exit_warning "kitty @ ${SOCKET} set-tab-title ${OPTS} $2"
        }
        shift 2
      else
        printf "\nERROR: title keyword requires an argument\n\n"
        brief_usage
      fi
      ;;
    opacity | tran* | --opacity | --tran*)
      if [ "$2" ]; then
        OPACITY="$2"
        shift 2
      else
        shift
      fi
      setopcty="${OPACITY}"
      ;;
    term* | --term* | info* | --info*)
      show_term_info
      printf "\n"
      shift
      ;;
    theme* | --theme*)
      kitty +kitten themes
      shift
      ;;
    tool* | --tool*)
      set_haves
      [ "${have_jq}" ] || {
        install_package jq
        have_jq=$(type -p jq)
      }
      [ "${have_lolcat}" ] || install_lolcat
      [ "${have_fetch}" ] || install_fastfetch
      [ "${have_figlet}" ] || {
        if [ "${have_gcc}" ]; then
          install_figlet
        else
          printf "\nInstallation of figlet requires 'gcc' but 'gcc' not found."
        fi
      }
      [ "${have_ranger}" ] || install_ranger
      ;;
    unicode | --unicode)
      kitty +kitten unicode_input
      shift
      ;;
    upgrade | --upgrade)
      if [ "${have_fzf}" ]; then
        fzf_release_version=$(curl -fsSL "${fzf_url}" | grep ^version= | awk -F '=' '{ print $2 }')
        fzf_install_version=$(fzf --version | awk '{ print $1 }')
        update_fzf=$(check_three_version "${fzf_release_version}" "${fzf_install_version}")
        if [ "${update_fzf}" ]; then
          upgrade_fzf
        else
          printf "\nInstalled version of Fzf is current âœ¨ ðŸŒŸ âœ¨\n"
        fi
      else
        install_fzf
      fi
      if [ "${have_fastfetch}" ]; then
        fch_release_version=$(get_fastfetch_release)
        fch_install_version=$(fastfetch --version | awk '{ print $2 }')
        update_fch=$(check_three_version "${fch_release_version}" "${fch_install_version}")
        if [ "${update_fch}" ]; then
          install_fastfetch
        else
          printf "\nInstalled version of Fastfetch is current âœ¨ ðŸŒŸ âœ¨\n"
        fi
      else
        [ "${have_fetch}" ] || install_fastfetch
      fi
      release_version=$(curl -fsSL "${kitty_version_url}")
      install_version=$(kitty --version | awk '{ print $2 }')
      update_kitty=$(check_three_version "${release_version}" "${install_version}")
      if [ "${update_kitty}" ]; then
        install_kitty
      else
        printf "\nInstalled version of Kitty is current âœ¨ ðŸŒŸ âœ¨\n"
      fi
      control_version=$(get_control_version)
      install_version=$(get_install_version)
      update_control=$(check_control_version "${control_version}" "${install_version}")
      if [ "${update_control}" ]; then
        upgrade_kitty_control
      else
        printf "\nInstalled version of kitty-control is current âœ¨ ðŸŒŸ âœ¨\n"
      fi
      shift
      ;;
    *)
      printf "\nUnsupported Kitty control command: $1\n"
      usage
      ;;
  esac
done

# These needed to be delayed until after any configuration loading
[ "${fontplus}" ] && kitty-fontplus "${fontplus}"
[ "${fontdown}" ] && kitty-fontminus "${fontdown}"
[ "${fontsize}" ] && kitty-fontsize "${fontsize}"
[ "${backgrnd}" ] && set-background "${backgrnd}"
[ "${foregrnd}" ] && set-foreground "${foregrnd}"
[ "${fullscrn}" ] && toggle-fullscreen
[ "${setopcty}" ] && set-opacity "${setopcty}"
[ "${width}" ] && {
  [ "${height}" ] || height="${width}"
  set-window-size "${width}" "${height}"
}
[ "${bg_image}" ] && {
  set-bg-image none
  set-bg-image "${bg_image}"
}
[ "${kittycmd}" ] && {
  kitty @ ${SOCKET} ${kittycmd} ${OPTS}
  [ $? -eq 0 ] || {
    exit_warning "kitty @ ${SOCKET} ${kittycmd} ${OPTS}"
  }
}
[ "${fetch}" ] && [ "${have_fetch}" ] && show_fetch proceed
[ "${set_menu}" ] && show_menu
