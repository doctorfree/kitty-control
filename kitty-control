#!/bin/bash
#  __ _  __  ____  ____  _  _       ___  __   __ _  ____  ____   __   __
# (  / )(  )(_  _)(_  _)( \/ )___  / __)/  \ (  ( \(_  _)(  _ \ /  \ (  )
#  )  (  )(   )(    )(   )  /(___)( (__(  O )/    /  )(   )   /(  O )/ (_/\
# (__\_)(__) (__)  (__) (__/       \___)\__/ \_)__) (__) (__\_) \__/ \____/
#
# kitty-control - control the Kitty terminal emulator from the command line
#
# Written Feb 1, 2024 by Ronald Joe Record <ronaldrecord@gmail.com>
#
VERSION=1.0.1
RELEASE=5
# The Kitty configuration directory
CONFDIR="${HOME}/.config/kitty"
[ "${KITTY_CONFIG_DIRECTORY}" ] && {
  [ -f "${KITTY_CONFIG_DIRECTORY}/kitty.conf" ] && {
    CONFDIR="${KITTY_CONFIG_DIRECTORY}"
  }
}
# The default background opacity for transparency
OPACITY="0.8"
# The socket Kitty is listening on if configured
# The format of this setting is:
#   SOCKET="--to unix:/path/to/socket"
# Leave blank if no listen socket configured
# Can be overridden with -s /path/to/socket
if [ "${KITTY_LISTEN_ON}" ]; then
    SOCKET="--to ${KITTY_LISTEN_ON}"
else
  SOCKET=
fi
# Kitty remote control options are used to specify which windows/tabs to modify
OPTS=

BOLD=$(tput bold 2>/dev/null)
NORM=$(tput sgr0 2>/dev/null)

brief_usage() {
  printf "${BOLD}Usage: kitty-control [-a] [-c command] [dark] [-e] [-f] [-i /path/to/image]"
  printf "\n    [-m|t <match>] [-s /path/to/socket] [-u|h|v] [back <color>] [term] [theme]"
  printf "\n    [diff [opts] <path1> <path2>] [fore <color>] [font [num]] [load [subdir]]"
  printf "\n    [icat [opts] <image>] [list] [title <title>] [tran [opacity]] [unicode]${NORM}"
  [ "$1" == "noexit" ] || {
    printf "\n\nTo display several examples run 'kitty-control -e'"
    printf "\nFor a full usage message run 'kitty-control -u'"
    printf "\nFor a full usage message with examples run 'kitty-control -h'\n\n"
    exit 1
  }
}

show_examples() {
  brief_usage noexit
  printf "\nExample invocations of kitty-control\n"
  printf "\nTo set a transparent Kitty background with 0.9 opacity:"
  printf "\n\t${BOLD}kitty-control tran 0.9${NORM}"
  printf "\nTo set the Kitty background to fully opaque (no transparency):"
  printf "\n\t${BOLD}kitty-control dark${NORM}"
  printf "\nTo set the Kitty background color to black and foreground color to white:"
  printf "\n\t${BOLD}kitty-control back black fore white${NORM}"
  printf "\nTo load the Kitty config in ~/.config/kitty/laptop/kitty.conf"
  printf "\n\t${BOLD}kitty-control load laptop${NORM}"
  printf "\nTo increase the font size by 2 points:"
  printf "\n\t${BOLD}kitty-control font +2${NORM}"
  printf "\nTo set the background image to ~/Pictures/groovy.png"
  printf "\n\t${BOLD}kitty-control -i ~/Pictures/groovy.png${NORM}"
  printf "\nActions can be combined on the same command line:"
  printf "\n\t${BOLD}kitty-control -i ~/Pictures/groovy.png fore cyan font 24${NORM}"
  printf "\nTo view the image ~/Pictures/cats.png"
  printf "\n\t${BOLD}kitty-control icat ~/Pictures/cats.png${NORM}"
  printf "\nTo view differences between /path/to/file1 and /path/to/file2"
  printf "\n\t${BOLD}kitty-control diff /path/to/file1 /path/to/file2${NORM}"
  printf "\nTo set the tab title of the tab currently titled '~/src/borg' to 'Borg Backup':"
  printf "\n\t${BOLD}kitty-control -m \"title:borg\" title \"Borg Backup\"${NORM}"
  printf "\nTo restore the original Kitty configuration:"
  printf "\n\t${BOLD}kitty-control load default${NORM}\n"
  exit 1
}

usage() {
  brief_usage noexit
  printf "\nWhere:"
  printf "\n    '${BOLD}back color${NORM}' Sets the background color to 'color'"
  printf "\n           If 'color' is 'reset' restores foreground and background to startup value"
  printf "\n    '${BOLD}dark${NORM}' Sets the Kitty background opacity to 1.0 (fully opaque)"
  printf "\n           Can use 'dark' or 'opaque'"
  printf "\n    '${BOLD}diff [opts] <file1|dir1> <file2|dir2>${NORM}'"
    printf " Displays differences using the 'diff' kitten"
  printf "\n           Enclose [opts] and <file1/dir1> in quotes if [opts] are provided"
  printf "\n           See https://sw.kovidgoyal.net/kitty/kittens/diff/#options"
  printf "\n    '${BOLD}font num${NORM}' Sets the font pointsize to 'num'"
  printf "\n           Can use 'font', 'fontsize', 'fontminus', or 'fontplus'"
  printf "\n           The second argument specifies the font size, either absolute, +, or -"
  printf "\n           e.g. 'kitty-control fontsize 24' would set the font size to 24 points"
  printf "\n                'kitty-control font +2' would increase the font size by 2 points"
  printf "\n                'kitty-control font' without argument resets the font size to default"
  printf "\n    '${BOLD}fore color${NORM}' Sets the foreground color to 'color'"
  printf "\n           If 'color' is 'reset' restores foreground and background to startup value"
  printf "\n    '${BOLD}icat [opts] <image>${NORM}' Displays <image> using the Kitty 'icat' kitten"
  printf "\n           Enclose [opts] and <image> in quotes if [opts] are provided"
  printf "\n           To remove all images currently displayed on the screen:"
  printf "\n               kitty-control icat --clear"
  printf "\n           See https://sw.kovidgoyal.net/kitty/kittens/icat/#options"
  printf "\n    '${BOLD}list${NORM}' Displays information on Kitty windows"
  printf "\n    '${BOLD}load [subdir]${NORM}'"
    printf " Reloads the Kitty configuration in ~/.config/kitty/kitty.conf"
  printf "\n           Can use 'load' or 'reload'"
  printf "\n           Specify a second argument to load ~/.config/kitty/<subdir>/kitty.conf"
  printf "\n           e.g. 'kitty-control load tv' would load ~/.config/kitty/tv/kitty.conf"
  printf "\n           'kitty-control load default' loads the ~/.config/kitty/kitty.conf config"
  printf "\n           'kitty-control load --help' displays a help message for the load command"
  printf "\n    '${BOLD}term${NORM}'"
    printf " Displays information about the terminal using the query_terminal kitten"
  printf "\n    '${BOLD}theme${NORM}' Displays the interactive theme selection kitten"
  printf "\n    '${BOLD}title <tab title>${NORM}' Sets the Kitty tab title to \"tab title\""
  printf "\n          Quote tab titles which contain spaces, e.g. \"This Is My Tab Title\""
  printf "\n          Use '-m <match>' to specify the tab to match"
  printf "\n    '${BOLD}tran [opacity]${NORM}' Sets the Kitty background opacity to 0.8"
  printf "\n           Can use 'tran', 'opacity', 'trans' or 'transparent'"
  printf "\n           Specify a second argument to set a custom background opacity:"
  printf "\n           e.g. 'kitty-control transparent 0.9'"
  printf "\n    '${BOLD}unicode${NORM}' Displays the Unicode input kitten"
  printf "\n    '${BOLD}-a${NORM}'"
    printf " Indicates modify all windows rather than just the currently active OS window"
  printf "\n    '${BOLD}-c command${NORM}'"
    printf " specifies a Kitty command to run (enclose command and arguments in quotes)"
  printf "\n        Can be used to run arbitrary commands, e.g. 'kitty-control -c get-colors'"
  printf "\n    '${BOLD}-e${NORM}' Displays several example invocations and exits"
  printf "\n    '${BOLD}-f${NORM}' Indicates toggle fullscreen"
  printf "\n    '${BOLD}-h${NORM}' Displays the usage message with examples and exits"
  printf "\n    '${BOLD}-i /path/to/image${NORM}'"
    printf " sets the background image for the specified Kitty windows"
  printf "\n        If /path/to/image is 'none' then any existing image will be removed"
  printf "\n    '${BOLD}-m <match>${NORM}' Specifies the window to match"
  printf "\n    '${BOLD}-t <match>${NORM}' Specifies the tab to match"
  printf "\n        Window/Tab matching can be used in conjunction with most kitty-control commands"
  printf "\n        If <match> is '--help' the Kitty documentation URL for matching will be displayed"
  printf "\n    '${BOLD}-s /path/to/socket${NORM}'"
    printf " Specifies the socket Kitty is listening on if enabled"
  printf "\n        If /path/to/socket is '--help' some help on configuring a Kitty socket is provided"
  printf "\n        '-s /path/...' can be used to send commands to Kitty from another terminal"
  printf "\n    '${BOLD}-u${NORM}' Displays the usage message and exits"
  printf "\n    '${BOLD}-v${NORM}' Displays the kitty-control version and exits"
  printf "\nAdjusting the background opacity or font size requires the original kitty.conf"
  printf "\nthat was used for this instance of Kitty to have enabled the following:"
  printf "\n    '${BOLD}dynamic_background_opacity yes${NORM}'"
    printf " and '${BOLD}allow_remote_control yes${NORM}'"
  printf "\nSee https://sw.kovidgoyal.net/kitty/remote-control/#control-kitty-from-scripts\n"
  [ "$1" == "examples" ] && show_examples
  exit 1
}

kitty-fontminus() {
  size="$1"
  first_size=${size::1}
  if [[ "${first_size}" == "-" ]]; then
    kitty @ ${SOCKET} set-font-size ${OPTS} -- $size
  else
    kitty @ ${SOCKET} set-font-size ${OPTS} -- -$size
  fi
}

kitty-fontplus() {
  size="$1"
  first_size=${size::1}
  if [[ "${first_size}" == "+" ]]; then
    kitty @ ${SOCKET} set-font-size ${OPTS} $size
  else
    kitty @ ${SOCKET} set-font-size ${OPTS} +$size
  fi
}

kitty-fontsize() {
  size="$1"
  first_size=${size::1}
  if [[ "${first_size}" == "-" ]]; then
    kitty @ ${SOCKET} set-font-size ${OPTS} -- $size
  else
    kitty @ ${SOCKET} set-font-size ${OPTS} $size
  fi
}

set-background() {
  if [ "$1" == "reset" ]; then
    kitty @ ${SOCKET} set-colors ${OPTS} --reset
  else
    kitty @ ${SOCKET} set-colors ${OPTS} background=$1
  fi
}

set-foreground() {
  if [ "$1" == "reset" ]; then
    kitty @ ${SOCKET} set-colors ${OPTS} --reset
  else
    kitty @ ${SOCKET} set-colors ${OPTS} foreground=$1
  fi
}

[ "$1" ] || brief_usage

# Some actions need to be delayed until after any configuration load
bg_image=
backgrnd=
foregrnd=
fontplus=
fontdown=
fontsize=
fullscrn=
kittycmd=
setopcty=
while [[ $1 ]]; do
  case "$1" in
    -a | --all)
      OPTS="$OPTS -a"
      shift
      ;;
    -c | --command)
      kittycmd="$2"
      shift 2
      ;;
    -i | --image)
      bg_image="$2"
      shift 2
      ;;
    -f | --fullscreen)
      fullscrn=1
      shift
      ;;
    -m | --match)
      if [ "$2" == "--help" ]; then
        printf "\nSee https://sw.kovidgoyal.net/kitty/remote-control/#matching-windows-and-tabs\n\n"
        exit 0
      else
        OPTS="$OPTS -m $2"
      fi
      shift 2
      ;;
    -s | --socket)
      if [ "$2" == "--help" ]; then
        printf "\nStart kitty as:"
        printf "\n\tkitty -o allow_remote_control=yes --listen-on unix:/tmp/mykitty"
        printf "\nThe kitty '--listen-on' option tells kitty to listen for control messages"
        printf "\nat the specified UNIX-domain socket. See kitty --help for details.\n"
        printf "\nNow you can control this instance of kitty using the"
        printf "\n\tkitten @ --to command line argument to kitten @. For example:"
        printf "\n\tkitten @ --to unix:/tmp/mykitty ls"
        printf "\nRemote control via a socket can be enabled in kitty.conf by setting:"
        printf "\n\tallow_remote_control yes"
        printf "\n\tlisten_on unix:/tmp/mykitty\n"
        printf "\nTo use this with kitty-control invoke with '-s /tmp/mykitty'."
        printf "\nFor example: kitty-control -s /tmp/mykitty fontsize 24"
        printf "\nThis would send the font size command to the Kitty instance"
        printf "\nlistening on the unix domain socket at /tmp/mykitty\n\n"
        exit 0
      else
        [ -S "$2" ] && SOCKET="--to unix:$2"
      fi
      shift 2
      ;;
    -t | --tab)
      if [ "$2" == "--help" ]; then
        printf "\nSee https://sw.kovidgoyal.net/kitty/remote-control/#matching-windows-and-tabs\n\n"
        exit 0
      else
        OPTS="$OPTS -t $2"
      fi
      shift 2
      ;;
    -e | --examples)
      show_examples
      shift
      ;;
    -h | --help)
      usage examples
      shift
      ;;
    -u | --usage)
      usage
      shift
      ;;
    -v | --version)
      printf "\nkitty-control version ${VERSION} release ${RELEASE}\n\n"
      exit 0
      ;;
    back*|--back*)
      if [ "$2" ]; then
        backgrnd="$2"
        shift 2
      else
        printf "\nERROR: background keyword requires an argument"
        brief_usage
      fi
      ;;
    fore*|--fore*)
      if [ "$2" ]; then
        foregrnd="$2"
        shift 2
      else
        printf "\nERROR: foreground keyword requires an argument"
        brief_usage
      fi
      ;;
    diff|--diff)
      if [ "$2" ] && [ "$3" ]; then
        kitty +kitten diff $2 $3
        shift 3
      else
        printf "\nERROR: diff keyword requires two file or directory arguments"
        brief_usage
      fi
      ;;
    icat|--icat)
      if [ "$2" ]; then
        kitty +kitten icat $2
        shift 2
      else
        printf "\nERROR: icat keyword requires an image as argument"
        brief_usage
      fi
      ;;
    list|ls|--list|--ls)
      kitty @ ${SOCKET} ls ${OPTS}
      shift
      ;;
    load|reload|--load|--reload)
      if [ "$2" ]; then
        if [ "$2" == "--help" ]; then
          printf "\nThe 'kitty-control load <subdir>' command loads the Kitty configuration"
          printf "\nfile in '~/.config/kitty/<subdir>/kitty.conf'. The current instance of"
          printf "\nkitty continues to run and the specified configuration file is loaded."
          printf "\nAll tabs and state are preserved while the new configuration is loaded."
          printf "\n\nThe new Kitty configuration file must be prepared beforehand and located"
          printf "\nin the specified subdirectory in the Kitty configuration folder."
          printf "\n\nFor example, if you have one Kitty configuration used for a large screen"
          printf "\nTV and another used for a laptop then placing the TV Kitty configuration"
          printf "\nin ~/.config/kitty/tv/kitty.conf and the laptop Kitty configuration in"
          printf "\n~/.config/kitty/laptop/kitty.conf would allow you to switch between these"
          printf "\ntwo Kitty configurations with kitty-control as follows:"
          printf "\n\tkitty-control load tv # When your display is the TV as monitor"
          printf "\n\tkitty-control load laptop # When you're using the laptop built-in display"
          printf "\n\nTo restore the Kitty configuration in ~/.config/kitty/kitty.conf:"
          printf "\n\tkitty-control load default\n\n"
          exit 0
        else
          if [ -f "${CONFDIR}/$2/kitty.conf" ]; then
            kitty @ ${SOCKET} kitten read_config.py "${CONFDIR}/$2/kitty.conf"
            shift 2
          else
            if [ "$2" == "default" ]; then
              kitty @ ${SOCKET} kitten read_config.py "${CONFDIR}/kitty.conf"
              shift 2
            else
              printf "\n ${CONFDIR}/$2/kitty.conf does not exist\n"
              shift 2
            fi
          fi
        fi
      else
        kitty @ ${SOCKET} kitten read_config.py "${CONFDIR}/kitty.conf"
        shift
      fi
      ;;
    dark|opaque|--dark|--opaque)
      setopcty="1.0"
      shift
      ;;
    fontmin*|fontdec*|--fontmin*|--fontdec*)
      if [ "$2" ]; then
        fontdown="$2"
        shift 2
      else
        fontdown=1
        shift
      fi
      ;;
    fontplus|fontinc*|--fontplus|--fontinc*)
      if [ "$2" ]; then
        fontplus="$2"
        shift 2
      else
        fontplus=1
        shift
      fi
      ;;
    font*|--font*)
      if [ "$2" ]; then
        fontsize="$2"
        shift 2
      else
        fontsize="0"
        shift
      fi
      ;;
    title|--title)
      if [ "$2" ]; then
        kitty @ ${SOCKET} set-tab-title ${OPTS} "$2"
        shift 2
      else
        printf "\nERROR: title keyword requires an argument"
        brief_usage
      fi
      ;;
    opacity|tran*|--opacity|--tran*)
      if [ "$2" ]; then
        OPACITY="$2"
        shift 2
      else
        shift
      fi
      setopcty="${OPACITY}"
      ;;
    term*|--term*)
      kitty +kitten query_terminal
      shift
      ;;
    theme*|--theme*)
      kitty +kitten themes
      shift
      ;;
    unicode|--unicode)
      kitty +kitten unicode_input
      shift
      ;;
    *)
      printf "\nUnsupported Kitty control command: $1"
      usage
      ;;
  esac
done

# These needed to be delayed until after any configuration loading
[ "${fontplus}" ] && kitty-fontplus "${fontplus}"
[ "${fontdown}" ] && kitty-fontminus "${fontdown}"
[ "${fontsize}" ] && kitty-fontsize "${fontsize}"
[ "${backgrnd}" ] && set-background "${backgrnd}"
[ "${foregrnd}" ] && set-foreground "${foregrnd}"
[ "${fullscrn}" ] && {
  kitty @ ${SOCKET} resize-os-window --action toggle-fullscreen ${OPTS}
}
[ "${setopcty}" ] && {
  kitty @ ${SOCKET} set-background-opacity ${OPTS} ${ssetopcty}
}
[ "${bg_image}" ] && {
  if [ "${bg_image}" == "none" ]; then
    kitty @ ${SOCKET} set-background-image ${OPTS} "${bg_image}"
  else
    if [ -f "${bg_image}" ]; then
      kitty @ ${SOCKET} set-background-image ${OPTS} "${bg_image}"
    else
      printf "\nSpecified Kitty background image ${bg_image} not found\n"
    fi
  fi
}
[ "${kittycmd}" ] && kitty @ ${SOCKET} ${kittycmd} ${OPTS}
